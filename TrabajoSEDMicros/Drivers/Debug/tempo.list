
tempo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004364  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004504  08004504  00005504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004590  08004590  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004590  08004590  00005590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004594  08004594  00005594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004598  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  080045f4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080045f4  00006318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a505  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d97  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00012328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f4  00000000  00000000  00012da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e8b  00000000  00000000  0001359c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c812  00000000  00000000  0002b427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009798f  00000000  00000000  00037c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ac  00000000  00000000  000cf60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d26b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044ec 	.word	0x080044ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080044ec 	.word	0x080044ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <MX_ADC1_Init>:

/**
 * @brief Inicializa el ADC1.
 */
void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]

    // Habilitar reloj del ADC
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <MX_ADC1_Init+0xb8>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc8:	4a26      	ldr	r2, [pc, #152]	@ (8000e64 <MX_ADC1_Init+0xb8>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dce:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <MX_ADC1_Init+0xb8>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

    // Configuración básica del ADC
    hadc1.Instance = ADC1;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000dde:	4a23      	ldr	r2, [pc, #140]	@ (8000e6c <MX_ADC1_Init+0xc0>)
 8000de0:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000de4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000de8:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <MX_ADC1_Init+0xc4>)
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e2a:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e2c:	f001 fa60 	bl	80022f0 <HAL_ADC_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0x8e>
        Error_Handler();
 8000e36:	f000 fd7d 	bl	8001934 <Error_Handler>
    }

    // Configuración del canal ADC
    sConfig.Channel = ADC_CHANNEL_1; // PA0
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <MX_ADC1_Init+0xbc>)
 8000e4e:	f001 fbdf 	bl	8002610 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0xb0>
        Error_Handler();
 8000e58:	f000 fd6c 	bl	8001934 <Error_Handler>
    }
}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	20000078 	.word	0x20000078
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	0f000001 	.word	0x0f000001

08000e74 <ADC_Read>:
/**
 * @brief Lee el valor actual del ADC.
 * @return Valor leído por el ADC (12 bits: 0-4095).
 */
uint32_t ADC_Read(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <ADC_Read+0x2c>)
 8000e7a:	f001 fa7d 	bl	8002378 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e82:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <ADC_Read+0x2c>)
 8000e84:	f001 fb2c 	bl	80024e0 <HAL_ADC_PollForConversion>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <ADC_Read+0x24>
        return HAL_ADC_GetValue(&hadc1);
 8000e8e:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <ADC_Read+0x2c>)
 8000e90:	f001 fbb1 	bl	80025f6 <HAL_ADC_GetValue>
 8000e94:	4603      	mov	r3, r0
 8000e96:	e000      	b.n	8000e9a <ADC_Read+0x26>
    }
    return 0; // Devuelve 0 si no hay un valor válido
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000078 	.word	0x20000078

08000ea4 <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70bb      	strb	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 8000ec6:	78bb      	ldrb	r3, [r7, #2]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d908      	bls.n	8000ede <lcd_begin+0x3a>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	lcd->rows = rows;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	78ba      	ldrb	r2, [r7, #2]
 8000ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	lcd->cols = cols;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	78fa      	ldrb	r2, [r7, #3]
 8000eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000eee:	78fa      	ldrb	r2, [r7, #3]
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	3340      	adds	r3, #64	@ 0x40
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	2240      	movs	r2, #64	@ 0x40
 8000efa:	2100      	movs	r1, #0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f972 	bl	80011e6 <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 8000f02:	787b      	ldrb	r3, [r7, #1]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <lcd_begin+0x7c>
 8000f08:	78bb      	ldrb	r3, [r7, #2]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 8000f20:	2032      	movs	r0, #50	@ 0x32
 8000f22:	f001 f9c1 	bl	80022a8 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8000f26:	2103      	movs	r1, #3
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f9f6 	bl	800131a <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f001 f9ba 	bl	80022a8 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8000f34:	2103      	movs	r1, #3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f9ef 	bl	800131a <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 8000f3c:	2096      	movs	r0, #150	@ 0x96
 8000f3e:	f000 fa09 	bl	8001354 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 8000f42:	2103      	movs	r1, #3
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f9e8 	bl	800131a <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f9e4 	bl	800131a <lcd_sendCmd>
	HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f001 f9a8 	bl	80022a8 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000f5e:	f043 0320 	orr.w	r3, r3, #32
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f9d7 	bl	800131a <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_display(lcd);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f84e 	bl	8001016 <lcd_display>
	lcd_clear(lcd);  // clear display
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f815 	bl	8000faa <lcd_clear>
	HAL_Delay(2);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f001 f991 	bl	80022a8 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f9bc 	bl	800131a <lcd_sendCmd>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f9b0 	bl	800131a <lcd_sendCmd>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <lcd_home>:
// ----------------------------------------------------------------

// set cursor position to zero
void lcd_home(LCD_t *lcd) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_RETURNHOME);
 8000fca:	2102      	movs	r1, #2
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f9a4 	bl	800131a <lcd_sendCmd>
	HAL_Delay(2);	//delay >= 1.52ms
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f001 f968 	bl	80022a8 <HAL_Delay>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <lcd_noDisplay>:
// ----------------------------------------------------------------

// Turn the display off
void lcd_noDisplay(LCD_t *lcd) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol &= ~LCD_DISPLAYON;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000fee:	f023 0304 	bic.w	r3, r3, #4
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f986 	bl	800131a <lcd_sendCmd>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <lcd_display>:
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f96b 	bl	800131a <lcd_sendCmd>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <lcd_noBlink>:
// ----------------------------------------------------------------

// Turn off the blinking cursor
void lcd_noBlink(LCD_t *lcd) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol &= ~LCD_BLINKON;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800105a:	f023 0301 	bic.w	r3, r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f950 	bl	800131a <lcd_sendCmd>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <lcd_blink>:
// ----------------------------------------------------------------

// Turn on the blinking cursor
void lcd_blink(LCD_t *lcd) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_BLINKON;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f935 	bl	800131a <lcd_sendCmd>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <lcd_noCursor>:
// ----------------------------------------------------------------

// Turns the underline cursor off
void lcd_noCursor(LCD_t *lcd) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol &= ~LCD_CURSORON;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80010c6:	f023 0302 	bic.w	r3, r3, #2
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f91a 	bl	800131a <lcd_sendCmd>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <lcd_cursor>:
// ----------------------------------------------------------------

// Turns the underline cursor on
void lcd_cursor(LCD_t *lcd) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_CURSORON;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4619      	mov	r1, r3
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f8ff 	bl	800131a <lcd_sendCmd>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <lcd_scrollDisplayLeft>:
// ----------------------------------------------------------------

//scroll the display to left without changing the RAM
void lcd_scrollDisplayLeft(LCD_t *lcd) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 800112c:	2118      	movs	r1, #24
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f8f3 	bl	800131a <lcd_sendCmd>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <lcd_scrollDisplayRight>:
// ----------------------------------------------------------------

//scroll the display to right without changing the RAM
void lcd_scrollDisplayRight(LCD_t *lcd) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 8001144:	211c      	movs	r1, #28
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f8e7 	bl	800131a <lcd_sendCmd>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <lcd_setCursor>:
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	4613      	mov	r3, r2
 8001162:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 8001164:	2304      	movs	r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 8001168:	78bb      	ldrb	r3, [r7, #2]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d803      	bhi.n	8001178 <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3b01      	subs	r3, #1
 8001176:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800117e:	78ba      	ldrb	r2, [r7, #2]
 8001180:	429a      	cmp	r2, r3
 8001182:	d304      	bcc.n	800118e <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800118a:	3b01      	subs	r3, #1
 800118c:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 800118e:	78bb      	ldrb	r3, [r7, #2]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	4413      	add	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f8b5 	bl	800131a <lcd_sendCmd>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	while (*str)
 80011c2:	e007      	b.n	80011d4 <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	603a      	str	r2, [r7, #0]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f886 	bl	80012e0 <lcd_sendData>
	while (*str)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f3      	bne.n	80011c4 <lcd_print+0xc>
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	lcd->row_offsets[1] = row1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	lcd->row_offsets[2] = row2;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	lcd->row_offsets[3] = row3;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	78ba      	ldrb	r2, [r7, #2]
 8001242:	4619      	mov	r1, r3
 8001244:	f001 fec0 	bl	8002fc8 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	08db      	lsrs	r3, r3, #3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	f001 feb3 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8d99      	ldrh	r1, [r3, #44]	@ 0x2c
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	f001 fea6 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a18      	ldr	r0, [r3, #32]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	085b      	lsrs	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f001 fe99 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6998      	ldr	r0, [r3, #24]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	8b99      	ldrh	r1, [r3, #28]
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	f001 fe8e 	bl	8002fc8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6918      	ldr	r0, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	8a9b      	ldrh	r3, [r3, #20]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 fe86 	bl	8002fc8 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 f849 	bl	8001354 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6918      	ldr	r0, [r3, #16]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	8a9b      	ldrh	r3, [r3, #20]
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	f001 fe7b 	bl	8002fc8 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 80012d2:	2032      	movs	r0, #50	@ 0x32
 80012d4:	f000 f83e 	bl	8001354 <delay_us>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff95 	bl	8001228 <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff8b 	bl	8001228 <lcd_send>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff78 	bl	8001228 <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff6e 	bl	8001228 <lcd_send>
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 800135e:	f002 fae3 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8001362:	4603      	mov	r3, r0
 8001364:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <delay_us+0x44>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9b      	lsrs	r3, r3, #18
 800136c:	b29b      	uxth	r3, r3
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e003      	b.n	8001384 <delay_us+0x30>
		__ASM("NOP");
 800137c:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	330e      	adds	r3, #14
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	897b      	ldrh	r3, [r7, #10]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf7      	blt.n	800137c <delay_us+0x28>
	}
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	431bde83 	.word	0x431bde83

0800139c <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void plazas_libres();
int debouncer(GPIO_TypeDef* GPIO_port, uint16_t GPIO_number);
/* Función de callback para interrupciones EXTI */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
   if (GPIO_Pin == GPIO_PIN_0) {
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_GPIO_EXTI_Callback+0x20>
       buttonPressed = 1; // Marca que el botón fue presionado
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_GPIO_EXTI_Callback+0x28>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
       HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // Indicador en D12 para depuración
 80013b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b6:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80013b8:	f001 fe1f 	bl	8002ffa <HAL_GPIO_TogglePin>
   }
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200000c2 	.word	0x200000c2
 80013c8:	40020c00 	.word	0x40020c00

080013cc <main>:
       }
   }
   last_state = current_state;
   return 0; // No hay evento
}
int main(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
    HAL_Init();
 80013d2:	f000 fef7 	bl	80021c4 <HAL_Init>
   SystemClock_Config();
 80013d6:	f000 f947 	bl	8001668 <SystemClock_Config>
   MX_GPIO_Init();
 80013da:	f000 f9ad 	bl	8001738 <MX_GPIO_Init>
   MX_ADC1_Init(); // Inicializar ADC
 80013de:	f7ff fce5 	bl	8000dac <MX_ADC1_Init>
   Parking_Init();
 80013e2:	f000 fb71 	bl	8001ac8 <Parking_Init>
   Parking_Init2();
 80013e6:	f000 fc53 	bl	8001c90 <Parking_Init2>
   //Parking_Init3();
   // LCD SETTINGS
        lcd.RS_port = LCD_RS_GPIO_Port;
 80013ea:	4b79      	ldr	r3, [pc, #484]	@ (80015d0 <main+0x204>)
 80013ec:	4a79      	ldr	r2, [pc, #484]	@ (80015d4 <main+0x208>)
 80013ee:	601a      	str	r2, [r3, #0]
        lcd.RS_pin = LCD_RS_Pin;
 80013f0:	4b77      	ldr	r3, [pc, #476]	@ (80015d0 <main+0x204>)
 80013f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f6:	809a      	strh	r2, [r3, #4]
        //lcd.RW_port = LCD_RW_GPIO_Port;
        //lcd.RW_pin = LCD_RW_Pin;
        lcd.EN_port = LCD_EN_GPIO_Port;
 80013f8:	4b75      	ldr	r3, [pc, #468]	@ (80015d0 <main+0x204>)
 80013fa:	4a76      	ldr	r2, [pc, #472]	@ (80015d4 <main+0x208>)
 80013fc:	611a      	str	r2, [r3, #16]
        lcd.EN_pin = LCD_EN_Pin;
 80013fe:	4b74      	ldr	r3, [pc, #464]	@ (80015d0 <main+0x204>)
 8001400:	2202      	movs	r2, #2
 8001402:	829a      	strh	r2, [r3, #20]
        lcd.D4_port = D4_GPIO_Port;
 8001404:	4b72      	ldr	r3, [pc, #456]	@ (80015d0 <main+0x204>)
 8001406:	4a73      	ldr	r2, [pc, #460]	@ (80015d4 <main+0x208>)
 8001408:	619a      	str	r2, [r3, #24]
        lcd.D4_pin = D4_Pin;
 800140a:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <main+0x204>)
 800140c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001410:	839a      	strh	r2, [r3, #28]
        lcd.D5_port = D5_GPIO_Port;
 8001412:	4b6f      	ldr	r3, [pc, #444]	@ (80015d0 <main+0x204>)
 8001414:	4a6f      	ldr	r2, [pc, #444]	@ (80015d4 <main+0x208>)
 8001416:	621a      	str	r2, [r3, #32]
        lcd.D5_pin = D5_Pin;
 8001418:	4b6d      	ldr	r3, [pc, #436]	@ (80015d0 <main+0x204>)
 800141a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800141e:	849a      	strh	r2, [r3, #36]	@ 0x24
        lcd.D6_port = D6_GPIO_Port;
 8001420:	4b6b      	ldr	r3, [pc, #428]	@ (80015d0 <main+0x204>)
 8001422:	4a6c      	ldr	r2, [pc, #432]	@ (80015d4 <main+0x208>)
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28
        lcd.D6_pin = D6_Pin;
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <main+0x204>)
 8001428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800142c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        lcd.D7_port = D7_GPIO_Port;
 800142e:	4b68      	ldr	r3, [pc, #416]	@ (80015d0 <main+0x204>)
 8001430:	4a68      	ldr	r2, [pc, #416]	@ (80015d4 <main+0x208>)
 8001432:	631a      	str	r2, [r3, #48]	@ 0x30
        lcd.D7_pin = D7_Pin;
 8001434:	4b66      	ldr	r3, [pc, #408]	@ (80015d0 <main+0x204>)
 8001436:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800143a:	869a      	strh	r2, [r3, #52]	@ 0x34
        // inicializamos el LCD
        lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 800143c:	2300      	movs	r3, #0
 800143e:	2202      	movs	r2, #2
 8001440:	2110      	movs	r1, #16
 8001442:	4863      	ldr	r0, [pc, #396]	@ (80015d0 <main+0x204>)
 8001444:	f7ff fd2e 	bl	8000ea4 <lcd_begin>
        /* Escribimos un mensaje inicial */
        lcd_setCursor(&lcd, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	4860      	ldr	r0, [pc, #384]	@ (80015d0 <main+0x204>)
 800144e:	f7ff fe81 	bl	8001154 <lcd_setCursor>
        lcd_print(&lcd, "BIENVENIDOS ");
 8001452:	4961      	ldr	r1, [pc, #388]	@ (80015d8 <main+0x20c>)
 8001454:	485e      	ldr	r0, [pc, #376]	@ (80015d0 <main+0x204>)
 8001456:	f7ff feaf 	bl	80011b8 <lcd_print>
        lcd_setCursor(&lcd, 0, 1);
 800145a:	2201      	movs	r2, #1
 800145c:	2100      	movs	r1, #0
 800145e:	485c      	ldr	r0, [pc, #368]	@ (80015d0 <main+0x204>)
 8001460:	f7ff fe78 	bl	8001154 <lcd_setCursor>
        lcd_print(&lcd, "AL PARKING");
 8001464:	495d      	ldr	r1, [pc, #372]	@ (80015dc <main+0x210>)
 8001466:	485a      	ldr	r0, [pc, #360]	@ (80015d0 <main+0x204>)
 8001468:	f7ff fea6 	bl	80011b8 <lcd_print>
        HAL_Delay(3000);
 800146c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001470:	f000 ff1a 	bl	80022a8 <HAL_Delay>
        lcd_noDisplay(&lcd); // Apagar el display
 8001474:	4856      	ldr	r0, [pc, #344]	@ (80015d0 <main+0x204>)
 8001476:	f7ff fdb3 	bl	8000fe0 <lcd_noDisplay>
        lcd_display(&lcd);   // Encender el display
 800147a:	4855      	ldr	r0, [pc, #340]	@ (80015d0 <main+0x204>)
 800147c:	f7ff fdcb 	bl	8001016 <lcd_display>
        lcd_clear(&lcd);     // Limpiar el LCD
 8001480:	4853      	ldr	r0, [pc, #332]	@ (80015d0 <main+0x204>)
 8001482:	f7ff fd92 	bl	8000faa <lcd_clear>
        lcd_home(&lcd);      // Llevar el cursor al inicio
 8001486:	4852      	ldr	r0, [pc, #328]	@ (80015d0 <main+0x204>)
 8001488:	f7ff fd9b 	bl	8000fc2 <lcd_home>
        lcd_print(&lcd, "Puedes aparcar");
 800148c:	4954      	ldr	r1, [pc, #336]	@ (80015e0 <main+0x214>)
 800148e:	4850      	ldr	r0, [pc, #320]	@ (80015d0 <main+0x204>)
 8001490:	f7ff fe92 	bl	80011b8 <lcd_print>
        HAL_Delay(1000);
 8001494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001498:	f000 ff06 	bl	80022a8 <HAL_Delay>
        lcd_cursor(&lcd);    // Mostrar el cursor
 800149c:	484c      	ldr	r0, [pc, #304]	@ (80015d0 <main+0x204>)
 800149e:	f7ff fe26 	bl	80010ee <lcd_cursor>
        HAL_Delay(1000);
 80014a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a6:	f000 feff 	bl	80022a8 <HAL_Delay>
        lcd_blink(&lcd);     // Hacer parpadear el cursor
 80014aa:	4849      	ldr	r0, [pc, #292]	@ (80015d0 <main+0x204>)
 80014ac:	f7ff fde9 	bl	8001082 <lcd_blink>
        HAL_Delay(3000);
 80014b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014b4:	f000 fef8 	bl	80022a8 <HAL_Delay>
        lcd_noBlink(&lcd);   // Detener el parpadeo
 80014b8:	4845      	ldr	r0, [pc, #276]	@ (80015d0 <main+0x204>)
 80014ba:	f7ff fdc7 	bl	800104c <lcd_noBlink>
        lcd_noCursor(&lcd);  // Ocultar el cursor
 80014be:	4844      	ldr	r0, [pc, #272]	@ (80015d0 <main+0x204>)
 80014c0:	f7ff fdfa 	bl	80010b8 <lcd_noCursor>
        HAL_Delay(100);
 80014c4:	2064      	movs	r0, #100	@ 0x64
 80014c6:	f000 feef 	bl	80022a8 <HAL_Delay>
        for (int i = 0; i < 10; ++i) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	e009      	b.n	80014e4 <main+0x118>
            lcd_scrollDisplayRight(&lcd); // Desplazar texto a la derecha
 80014d0:	483f      	ldr	r0, [pc, #252]	@ (80015d0 <main+0x204>)
 80014d2:	f7ff fe33 	bl	800113c <lcd_scrollDisplayRight>
            HAL_Delay(300);
 80014d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014da:	f000 fee5 	bl	80022a8 <HAL_Delay>
        for (int i = 0; i < 10; ++i) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3301      	adds	r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b09      	cmp	r3, #9
 80014e8:	ddf2      	ble.n	80014d0 <main+0x104>
        }
        for (int i = 0; i < 10; ++i) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	e009      	b.n	8001504 <main+0x138>
              lcd_scrollDisplayLeft(&lcd); // Desplazar texto a la izquierda
 80014f0:	4837      	ldr	r0, [pc, #220]	@ (80015d0 <main+0x204>)
 80014f2:	f7ff fe17 	bl	8001124 <lcd_scrollDisplayLeft>
              HAL_Delay(300);
 80014f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014fa:	f000 fed5 	bl	80022a8 <HAL_Delay>
        for (int i = 0; i < 10; ++i) {
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b09      	cmp	r3, #9
 8001508:	ddf2      	ble.n	80014f0 <main+0x124>
          }
   while (1) {
       Parking_Process();
 800150a:	f000 fa45 	bl	8001998 <Parking_Process>
       Parking_Process2();
 800150e:	f000 fc43 	bl	8001d98 <Parking_Process2>
       //Parking_Process3();
       adcval = ADC_Read(); // Leer valor del ADC
 8001512:	f7ff fcaf 	bl	8000e74 <ADC_Read>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <main+0x218>)
 800151c:	801a      	strh	r2, [r3, #0]
       // Lógica para manejar el LED de emergencia
       if ((((adcval < 2400) || (buttonPressed))) && !ledOn) {
 800151e:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <main+0x218>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001526:	d303      	bcc.n	8001530 <main+0x164>
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <main+0x21c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d015      	beq.n	800155c <main+0x190>
 8001530:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <main+0x220>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d110      	bne.n	800155c <main+0x190>
           buttonPressed = 0; // Reinicia la bandera tras usarla
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <main+0x21c>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
           ledOn = 1;         // Marca que el LED está encendido
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <main+0x220>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
           ledStartTime = HAL_GetTick(); // Registra el tiempo de inicio
 8001546:	f000 fea3 	bl	8002290 <HAL_GetTick>
 800154a:	4603      	mov	r3, r0
 800154c:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <main+0x224>)
 800154e:	6013      	str	r3, [r2, #0]
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Enciende LED
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001556:	4827      	ldr	r0, [pc, #156]	@ (80015f4 <main+0x228>)
 8001558:	f001 fd36 	bl	8002fc8 <HAL_GPIO_WritePin>
       }
       if (ledOn && (HAL_GetTick() - ledStartTime >= 7000)) {
 800155c:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <main+0x220>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <main+0x1c0>
 8001566:	f000 fe93 	bl	8002290 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <main+0x224>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8001576:	4293      	cmp	r3, r2
 8001578:	d908      	bls.n	800158c <main+0x1c0>
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // Apaga LED
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001580:	481c      	ldr	r0, [pc, #112]	@ (80015f4 <main+0x228>)
 8001582:	f001 fd21 	bl	8002fc8 <HAL_GPIO_WritePin>
           ledOn = 0; // Marca que el LED está apagado
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <main+0x220>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
       }
       // Control del LED externo (PA4) según el valor del ADC
       if (adcval < 2400) {
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <main+0x218>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001594:	d209      	bcs.n	80015aa <main+0x1de>
           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Enciende LED externo
 8001596:	2201      	movs	r2, #1
 8001598:	2110      	movs	r1, #16
 800159a:	4817      	ldr	r0, [pc, #92]	@ (80015f8 <main+0x22c>)
 800159c:	f001 fd14 	bl	8002fc8 <HAL_GPIO_WritePin>
           ledEntrada = HAL_GetTick();
 80015a0:	f000 fe76 	bl	8002290 <HAL_GetTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a15      	ldr	r2, [pc, #84]	@ (80015fc <main+0x230>)
 80015a8:	6013      	str	r3, [r2, #0]
       }
       if(HAL_GetTick() - ledEntrada >= 1500){
 80015aa:	f000 fe71 	bl	8002290 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <main+0x230>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d904      	bls.n	80015c8 <main+0x1fc>
                   	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <main+0x22c>)
 80015c4:	f001 fd00 	bl	8002fc8 <HAL_GPIO_WritePin>
       }
       plazas_libres();
 80015c8:	f000 f81a 	bl	8001600 <plazas_libres>
       Parking_Process();
 80015cc:	e79d      	b.n	800150a <main+0x13e>
 80015ce:	bf00      	nop
 80015d0:	200000d0 	.word	0x200000d0
 80015d4:	40020400 	.word	0x40020400
 80015d8:	08004504 	.word	0x08004504
 80015dc:	08004514 	.word	0x08004514
 80015e0:	08004520 	.word	0x08004520
 80015e4:	200000c0 	.word	0x200000c0
 80015e8:	200000c2 	.word	0x200000c2
 80015ec:	200000c3 	.word	0x200000c3
 80015f0:	200000c4 	.word	0x200000c4
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40020000 	.word	0x40020000
 80015fc:	200000c8 	.word	0x200000c8

08001600 <plazas_libres>:
   }
}
void plazas_libres(){
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	plazas = 4 - get_object_near() - get_object_near2();
 8001606:	f000 fb0d 	bl	8001c24 <get_object_near>
 800160a:	4603      	mov	r3, r0
 800160c:	461c      	mov	r4, r3
 800160e:	f000 fc6d 	bl	8001eec <get_object_near2>
 8001612:	4603      	mov	r3, r0
 8001614:	4423      	add	r3, r4
 8001616:	b29b      	uxth	r3, r3
 8001618:	f1c3 0304 	rsb	r3, r3, #4
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <plazas_libres+0x58>)
 8001620:	801a      	strh	r2, [r3, #0]
	char plazas_char[5]; // Espacio para 2 dígitos + '\0'
	    sprintf(plazas_char, "%u", plazas);
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <plazas_libres+0x58>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	463b      	mov	r3, r7
 800162a:	490c      	ldr	r1, [pc, #48]	@ (800165c <plazas_libres+0x5c>)
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fabd 	bl	8003bac <siprintf>
	    lcd_setCursor(&lcd, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	480a      	ldr	r0, [pc, #40]	@ (8001660 <plazas_libres+0x60>)
 8001638:	f7ff fd8c 	bl	8001154 <lcd_setCursor>
	    lcd_print(&lcd, "Plazas libres: ");
 800163c:	4909      	ldr	r1, [pc, #36]	@ (8001664 <plazas_libres+0x64>)
 800163e:	4808      	ldr	r0, [pc, #32]	@ (8001660 <plazas_libres+0x60>)
 8001640:	f7ff fdba 	bl	80011b8 <lcd_print>
	    lcd_print(&lcd, plazas_char);
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <plazas_libres+0x60>)
 800164a:	f7ff fdb5 	bl	80011b8 <lcd_print>
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	200000cc 	.word	0x200000cc
 800165c:	08004530 	.word	0x08004530
 8001660:	200000d0 	.word	0x200000d0
 8001664:	08004534 	.word	0x08004534

08001668 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	@ 0x50
 800166c:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2230      	movs	r2, #48	@ 0x30
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fab8 	bl	8003bec <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 /** Configure the main internal regulator output voltage
 */
 __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <SystemClock_Config+0xc8>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	4a26      	ldr	r2, [pc, #152]	@ (8001730 <SystemClock_Config+0xc8>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	@ 0x40
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <SystemClock_Config+0xc8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <SystemClock_Config+0xcc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a20      	ldr	r2, [pc, #128]	@ (8001734 <SystemClock_Config+0xcc>)
 80016b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c8:	2301      	movs	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016cc:	2310      	movs	r3, #16
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	2302      	movs	r3, #2
 80016d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 RCC_OscInitStruct.PLL.PLLM = 8;
 80016d8:	2308      	movs	r3, #8
 80016da:	643b      	str	r3, [r7, #64]	@ 0x40
 RCC_OscInitStruct.PLL.PLLN = 100;
 80016dc:	2364      	movs	r3, #100	@ 0x64
 80016de:	647b      	str	r3, [r7, #68]	@ 0x44
 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 RCC_OscInitStruct.PLL.PLLQ = 8;
 80016e4:	2308      	movs	r3, #8
 80016e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fcb7 	bl	8003060 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x94>
 {
   Error_Handler();
 80016f8:	f000 f91c 	bl	8001934 <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	60fb      	str	r3, [r7, #12]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001700:	2302      	movs	r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	61bb      	str	r3, [r7, #24]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2103      	movs	r1, #3
 8001718:	4618      	mov	r0, r3
 800171a:	f001 ff19 	bl	8003550 <HAL_RCC_ClockConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0xc0>
 {
   Error_Handler();
 8001724:	f000 f906 	bl	8001934 <Error_Handler>
 }
}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	@ 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b72      	ldr	r3, [pc, #456]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a71      	ldr	r2, [pc, #452]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001758:	f043 0310 	orr.w	r3, r3, #16
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b6f      	ldr	r3, [pc, #444]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b6b      	ldr	r3, [pc, #428]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a6a      	ldr	r2, [pc, #424]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b68      	ldr	r3, [pc, #416]	@ (800191c <MX_GPIO_Init+0x1e4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b64      	ldr	r3, [pc, #400]	@ (800191c <MX_GPIO_Init+0x1e4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a63      	ldr	r2, [pc, #396]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b61      	ldr	r3, [pc, #388]	@ (800191c <MX_GPIO_Init+0x1e4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b5d      	ldr	r3, [pc, #372]	@ (800191c <MX_GPIO_Init+0x1e4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a5c      	ldr	r2, [pc, #368]	@ (800191c <MX_GPIO_Init+0x1e4>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b5a      	ldr	r3, [pc, #360]	@ (800191c <MX_GPIO_Init+0x1e4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b56      	ldr	r3, [pc, #344]	@ (800191c <MX_GPIO_Init+0x1e4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a55      	ldr	r2, [pc, #340]	@ (800191c <MX_GPIO_Init+0x1e4>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b53      	ldr	r3, [pc, #332]	@ (800191c <MX_GPIO_Init+0x1e4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	211c      	movs	r1, #28
 80017de:	4850      	ldr	r0, [pc, #320]	@ (8001920 <MX_GPIO_Init+0x1e8>)
 80017e0:	f001 fbf2 	bl	8002fc8 <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2107      	movs	r1, #7
 80017e8:	484e      	ldr	r0, [pc, #312]	@ (8001924 <MX_GPIO_Init+0x1ec>)
 80017ea:	f001 fbed 	bl	8002fc8 <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2170      	movs	r1, #112	@ 0x70
 80017f2:	484d      	ldr	r0, [pc, #308]	@ (8001928 <MX_GPIO_Init+0x1f0>)
 80017f4:	f001 fbe8 	bl	8002fc8 <HAL_GPIO_WritePin>
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_EN_Pin|LCD_RS_Pin|D7_Pin
 80017f8:	2200      	movs	r2, #0
 80017fa:	f24f 4103 	movw	r1, #62467	@ 0xf403
 80017fe:	484b      	ldr	r0, [pc, #300]	@ (800192c <MX_GPIO_Init+0x1f4>)
 8001800:	f001 fbe2 	bl	8002fc8 <HAL_GPIO_WritePin>
                         |D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800180a:	4849      	ldr	r0, [pc, #292]	@ (8001930 <MX_GPIO_Init+0x1f8>)
 800180c:	f001 fbdc 	bl	8002fc8 <HAL_GPIO_WritePin>
 /*Configure GPIO pins : PE2 PE3 PE4 */
 GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001810:	231c      	movs	r3, #28
 8001812:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	483e      	ldr	r0, [pc, #248]	@ (8001920 <MX_GPIO_Init+0x1e8>)
 8001828:	f001 fa32 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pin : PE5 */
 GPIO_InitStruct.Pin = GPIO_PIN_5;
 800182c:	2320      	movs	r3, #32
 800182e:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4838      	ldr	r0, [pc, #224]	@ (8001920 <MX_GPIO_Init+0x1e8>)
 8001840:	f001 fa26 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pins : PC0 PC1 PC2 */
 GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001844:	2307      	movs	r3, #7
 8001846:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4832      	ldr	r0, [pc, #200]	@ (8001924 <MX_GPIO_Init+0x1ec>)
 800185c:	f001 fa18 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pin : PC3 */
 GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001860:	2308      	movs	r3, #8
 8001862:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	482c      	ldr	r0, [pc, #176]	@ (8001924 <MX_GPIO_Init+0x1ec>)
 8001874:	f001 fa0c 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pin : PA0 */
 GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001878:	2301      	movs	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001880:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4826      	ldr	r0, [pc, #152]	@ (8001928 <MX_GPIO_Init+0x1f0>)
 800188e:	f001 f9ff 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pins : PA4 PA5 PA6 */
 GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001892:	2370      	movs	r3, #112	@ 0x70
 8001894:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	481f      	ldr	r0, [pc, #124]	@ (8001928 <MX_GPIO_Init+0x1f0>)
 80018aa:	f001 f9f1 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pin : PA7 */
 GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ae:	2380      	movs	r3, #128	@ 0x80
 80018b0:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4819      	ldr	r0, [pc, #100]	@ (8001928 <MX_GPIO_Init+0x1f0>)
 80018c2:	f001 f9e5 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pins : PB0 LCD_EN_Pin LCD_RS_Pin D7_Pin
                          D6_Pin D5_Pin D4_Pin */
 GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_EN_Pin|LCD_RS_Pin|D7_Pin
 80018c6:	f24f 4303 	movw	r3, #62467	@ 0xf403
 80018ca:	617b      	str	r3, [r7, #20]
                         |D6_Pin|D5_Pin|D4_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4813      	ldr	r0, [pc, #76]	@ (800192c <MX_GPIO_Init+0x1f4>)
 80018e0:	f001 f9d6 	bl	8002c90 <HAL_GPIO_Init>
 /*Configure GPIO pin : PD13 */
 GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e8:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <MX_GPIO_Init+0x1f8>)
 80018fe:	f001 f9c7 	bl	8002c90 <HAL_GPIO_Init>
 /* EXTI interrupt init*/
 HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2006      	movs	r0, #6
 8001908:	f001 f98b 	bl	8002c22 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800190c:	2006      	movs	r0, #6
 800190e:	f001 f9a4 	bl	8002c5a <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40021000 	.word	0x40021000
 8001924:	40020800 	.word	0x40020800
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	40020c00 	.word	0x40020c00

08001934 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <Error_Handler+0x8>

08001940 <Measure_Pulse_Width>:
static uint8_t object_near = 0;
static float tiempo_segundos = 0.0f;


/* Función estática para medir el ancho del pulso ECHO */
static uint32_t Measure_Pulse_Width(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
    uint32_t start = 0, stop = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]

    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 800194e:	bf00      	nop
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	480e      	ldr	r0, [pc, #56]	@ (800198c <Measure_Pulse_Width+0x4c>)
 8001954:	f001 fb20 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f8      	beq.n	8001950 <Measure_Pulse_Width+0x10>
    start = __HAL_TIM_GET_COUNTER(&htim2);
 800195e:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <Measure_Pulse_Width+0x50>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	607b      	str	r3, [r7, #4]

    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 8001966:	bf00      	nop
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	4808      	ldr	r0, [pc, #32]	@ (800198c <Measure_Pulse_Width+0x4c>)
 800196c:	f001 fb14 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b01      	cmp	r3, #1
 8001974:	d0f8      	beq.n	8001968 <Measure_Pulse_Width+0x28>
    stop = __HAL_TIM_GET_COUNTER(&htim2);
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <Measure_Pulse_Width+0x50>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	603b      	str	r3, [r7, #0]

    return (stop >= start) ? (stop - start) : (0xffffffff - start + stop + 1);
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1ad3      	subs	r3, r2, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020000 	.word	0x40020000
 8001990:	20000110 	.word	0x20000110
 8001994:	00000000 	.word	0x00000000

08001998 <Parking_Process>:


/* Procesar la lógica de estacionamiento */

void Parking_Process(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
    // Generar pulso TRIG
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2140      	movs	r1, #64	@ 0x40
 80019a2:	4841      	ldr	r0, [pc, #260]	@ (8001aa8 <Parking_Process+0x110>)
 80019a4:	f001 fb10 	bl	8002fc8 <HAL_GPIO_WritePin>
    Delay_us(10); // Pulso de 10 us
 80019a8:	200a      	movs	r0, #10
 80019aa:	f000 f923 	bl	8001bf4 <Delay_us>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2140      	movs	r1, #64	@ 0x40
 80019b2:	483d      	ldr	r0, [pc, #244]	@ (8001aa8 <Parking_Process+0x110>)
 80019b4:	f001 fb08 	bl	8002fc8 <HAL_GPIO_WritePin>

    // Medir el pulso ECHO y calcular la distancia
    uint32_t duration = Measure_Pulse_Width();
 80019b8:	f7ff ffc2 	bl	8001940 <Measure_Pulse_Width>
 80019bc:	6078      	str	r0, [r7, #4]
    distance = (duration / 2.0) * 0.0343;// Distancia en centímetros
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fda0 	bl	8000504 <__aeabi_ui2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019cc:	f7fe ff3e 	bl	800084c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	a331      	add	r3, pc, #196	@ (adr r3, 8001aa0 <Parking_Process+0x108>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f817 	bl	8000a1c <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a2e      	ldr	r2, [pc, #184]	@ (8001aac <Parking_Process+0x114>)
 80019f2:	6013      	str	r3, [r2, #0]

    if (distance <= 5.0) {
 80019f4:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <Parking_Process+0x114>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d81c      	bhi.n	8001a42 <Parking_Process+0xaa>
        // Objeto cercano
        HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);       // Encender LED rojo
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	4826      	ldr	r0, [pc, #152]	@ (8001aa8 <Parking_Process+0x110>)
 8001a0e:	f001 fadb 	bl	8002fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET); // Apagar LED verde
 8001a12:	2200      	movs	r2, #0
 8001a14:	2101      	movs	r1, #1
 8001a16:	4826      	ldr	r0, [pc, #152]	@ (8001ab0 <Parking_Process+0x118>)
 8001a18:	f001 fad6 	bl	8002fc8 <HAL_GPIO_WritePin>

        if (object_near == 0) {
 8001a1c:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <Parking_Process+0x11c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d106      	bne.n	8001a32 <Parking_Process+0x9a>
            object_near = 1;  // Objeto detectado por primera vez
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <Parking_Process+0x11c>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
            elapsed_time = 0; // Reiniciar el tiempo acumulado
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <Parking_Process+0x120>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e02c      	b.n	8001a8c <Parking_Process+0xf4>
        } else {
            elapsed_time += duration/2; // Acumular tiempo transcurrido
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	085a      	lsrs	r2, r3, #1
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <Parking_Process+0x120>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <Parking_Process+0x120>)
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e024      	b.n	8001a8c <Parking_Process+0xf4>
        }
    } else {
        // Objeto alejado
        HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET); // Apagar LED rojo
 8001a42:	2200      	movs	r2, #0
 8001a44:	2120      	movs	r1, #32
 8001a46:	4818      	ldr	r0, [pc, #96]	@ (8001aa8 <Parking_Process+0x110>)
 8001a48:	f001 fabe 	bl	8002fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);   // Encender LED verde
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4817      	ldr	r0, [pc, #92]	@ (8001ab0 <Parking_Process+0x118>)
 8001a52:	f001 fab9 	bl	8002fc8 <HAL_GPIO_WritePin>

        if (object_near == 1) {
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <Parking_Process+0x11c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d116      	bne.n	8001a8c <Parking_Process+0xf4>
            object_near = 0;         // Objeto ya no está cerca
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <Parking_Process+0x11c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
            tiempo_plaza1 = elapsed_time; // Guardar el tiempo acumulado
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <Parking_Process+0x120>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <Parking_Process+0x124>)
 8001a6a:	6013      	str	r3, [r2, #0]
            tiempo_segundos=tiempo_plaza1/1000.0f;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <Parking_Process+0x124>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a78:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001ac0 <Parking_Process+0x128>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <Parking_Process+0x12c>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
            elapsed_time = 0;        // Reiniciar el tiempo acumulado
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <Parking_Process+0x120>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
        }
    }

    HAL_Delay(100); // Pausa entre mediciones
 8001a8c:	2064      	movs	r0, #100	@ 0x64
 8001a8e:	f000 fc0b 	bl	80022a8 <HAL_Delay>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	04816f00 	.word	0x04816f00
 8001aa4:	3fa18fc5 	.word	0x3fa18fc5
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	20000158 	.word	0x20000158
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	20000164 	.word	0x20000164
 8001ab8:	2000015c 	.word	0x2000015c
 8001abc:	20000160 	.word	0x20000160
 8001ac0:	447a0000 	.word	0x447a0000
 8001ac4:	20000168 	.word	0x20000168

08001ac8 <Parking_Init>:
void Parking_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

    // Inicialización de GPIO
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b44      	ldr	r3, [pc, #272]	@ (8001be4 <Parking_Init+0x11c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a43      	ldr	r2, [pc, #268]	@ (8001be4 <Parking_Init+0x11c>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <Parking_Init+0x11c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <Parking_Init+0x11c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a3c      	ldr	r2, [pc, #240]	@ (8001be4 <Parking_Init+0x11c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <Parking_Init+0x11c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = TRIG_PIN;
 8001b16:	2340      	movs	r3, #64	@ 0x40
 8001b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TRIG_PORT, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	482e      	ldr	r0, [pc, #184]	@ (8001be8 <Parking_Init+0x120>)
 8001b2e:	f001 f8af 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ECHO_PIN;
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ECHO_PORT, &GPIO_InitStruct);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	4828      	ldr	r0, [pc, #160]	@ (8001be8 <Parking_Init+0x120>)
 8001b46:	f001 f8a3 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RED_PIN;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_RED_PORT, &GPIO_InitStruct);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4821      	ldr	r0, [pc, #132]	@ (8001be8 <Parking_Init+0x120>)
 8001b62:	f001 f895 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_PIN;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481b      	ldr	r0, [pc, #108]	@ (8001bec <Parking_Init+0x124>)
 8001b7e:	f001 f887 	bl	8002c90 <HAL_GPIO_Init>

    // Inicialización del temporizador TIM2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <Parking_Init+0x11c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a16      	ldr	r2, [pc, #88]	@ (8001be4 <Parking_Init+0x11c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <Parking_Init+0x11c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]

    htim2.Instance = TIM2;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <Parking_Init+0x128>)
 8001ba0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba4:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 100 - 1;  // Frecuencia de 1 MHz
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <Parking_Init+0x128>)
 8001ba8:	2263      	movs	r2, #99	@ 0x63
 8001baa:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bac:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <Parking_Init+0x128>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 0xffffffff; // Periodo máximo (32 bits)
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <Parking_Init+0x128>)
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <Parking_Init+0x128>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <Parking_Init+0x128>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001bc6:	480a      	ldr	r0, [pc, #40]	@ (8001bf0 <Parking_Init+0x128>)
 8001bc8:	f001 feba 	bl	8003940 <HAL_TIM_Base_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <Parking_Init+0x10e>
        while (1); // Manejo de error
 8001bd2:	bf00      	nop
 8001bd4:	e7fd      	b.n	8001bd2 <Parking_Init+0x10a>
    }

    HAL_TIM_Base_Start(&htim2); // Iniciar temporizador
 8001bd6:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <Parking_Init+0x128>)
 8001bd8:	f001 ff02 	bl	80039e0 <HAL_TIM_Base_Start>
}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	20000110 	.word	0x20000110

08001bf4 <Delay_us>:


/* Función de delay en microsegundos */
void Delay_us(uint32_t us) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reiniciar contador
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <Delay_us+0x2c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001c04:	bf00      	nop
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <Delay_us+0x2c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d8f9      	bhi.n	8001c06 <Delay_us+0x12>
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000110 	.word	0x20000110

08001c24 <get_object_near>:



uint8_t get_object_near(){return object_near;}
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <get_object_near+0x14>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000164 	.word	0x20000164

08001c3c <Measure_Pulse_Width>:
static uint8_t object_near2 = 0;



/* Función estática para medir el ancho del pulso ECHO */
static uint32_t Measure_Pulse_Width(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
    uint32_t start = 0, stop = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]

    while (HAL_GPIO_ReadPin(ECHO_PORT2, ECHO_PIN2) == GPIO_PIN_RESET);
 8001c4a:	bf00      	nop
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <Measure_Pulse_Width+0x4c>)
 8001c50:	f001 f9a2 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f8      	beq.n	8001c4c <Measure_Pulse_Width+0x10>
    start = __HAL_TIM_GET_COUNTER(&htim3);
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <Measure_Pulse_Width+0x50>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	607b      	str	r3, [r7, #4]

    while (HAL_GPIO_ReadPin(ECHO_PORT2, ECHO_PIN2) == GPIO_PIN_SET);
 8001c62:	bf00      	nop
 8001c64:	2108      	movs	r1, #8
 8001c66:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <Measure_Pulse_Width+0x4c>)
 8001c68:	f001 f996 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d0f8      	beq.n	8001c64 <Measure_Pulse_Width+0x28>
    stop = __HAL_TIM_GET_COUNTER(&htim3);
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <Measure_Pulse_Width+0x50>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	603b      	str	r3, [r7, #0]

    return (stop >= start) ? (stop - start) : (0xFFFFFFFF - start + stop + 1);
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	1ad3      	subs	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	2000016c 	.word	0x2000016c

08001c90 <Parking_Init2>:

// INICIALIZACION PARKING 2

void Parking_Init2(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0

    // INICIALIZACION DE LOS PINES PARKING 2

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <Parking_Init2+0xf4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a39      	ldr	r2, [pc, #228]	@ (8001d84 <Parking_Init2+0xf4>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <Parking_Init2+0xf4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = TRIG_PIN2;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TRIG_PORT2, &GPIO_InitStruct);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	482b      	ldr	r0, [pc, #172]	@ (8001d88 <Parking_Init2+0xf8>)
 8001cda:	f000 ffd9 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ECHO_PIN2;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ECHO_PORT2, &GPIO_InitStruct);
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4825      	ldr	r0, [pc, #148]	@ (8001d88 <Parking_Init2+0xf8>)
 8001cf2:	f000 ffcd 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RED_PIN2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_RED_PORT2, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	481e      	ldr	r0, [pc, #120]	@ (8001d88 <Parking_Init2+0xf8>)
 8001d0e:	f000 ffbf 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_GREEN_PIN2;
 8001d12:	2304      	movs	r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(LED_GREEN_PORT2, &GPIO_InitStruct);
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481a      	ldr	r0, [pc, #104]	@ (8001d88 <Parking_Init2+0xf8>)
 8001d1e:	f000 ffb7 	bl	8002c90 <HAL_GPIO_Init>

    // INICIALIZACION DEL TEMPORIZADOR PARKING 2 (TIM3)

    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <Parking_Init2+0xf4>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <Parking_Init2+0xf4>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <Parking_Init2+0xf4>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

    htim3.Instance = TIM3;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <Parking_Init2+0x100>)
 8001d42:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 100 - 1;  // Frecuencia de 1 MHz
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d46:	2263      	movs	r2, #99	@ 0x63
 8001d48:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535; // Periodo máximo (32 bits)
 8001d50:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d56:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001d64:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d66:	f001 fdeb 	bl	8003940 <HAL_TIM_Base_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <Parking_Init2+0xe4>
        while (1); // Manejo de error
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <Parking_Init2+0xe0>
    }

    HAL_TIM_Base_Start(&htim3); // Iniciar temporizador
 8001d74:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <Parking_Init2+0xfc>)
 8001d76:	f001 fe33 	bl	80039e0 <HAL_TIM_Base_Start>
}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	2000016c 	.word	0x2000016c
 8001d90:	40000400 	.word	0x40000400
 8001d94:	00000000 	.word	0x00000000

08001d98 <Parking_Process2>:


//FUNCIONAMINETO PARKING 2

void Parking_Process2(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

    // Generar pulso TRIG
    HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2101      	movs	r1, #1
 8001da2:	483f      	ldr	r0, [pc, #252]	@ (8001ea0 <Parking_Process2+0x108>)
 8001da4:	f001 f910 	bl	8002fc8 <HAL_GPIO_WritePin>
    Delay_us2(10); // Pulso de 10 us
 8001da8:	200a      	movs	r0, #10
 8001daa:	f000 f887 	bl	8001ebc <Delay_us2>
    HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	483b      	ldr	r0, [pc, #236]	@ (8001ea0 <Parking_Process2+0x108>)
 8001db4:	f001 f908 	bl	8002fc8 <HAL_GPIO_WritePin>

    // Medir el pulso ECHO y calcular la distancia
    uint32_t duration2 = Measure_Pulse_Width();
 8001db8:	f7ff ff40 	bl	8001c3c <Measure_Pulse_Width>
 8001dbc:	6078      	str	r0, [r7, #4]
    distance2 = (duration2 / 2.0) * 0.0343;// Distancia en centímetros
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fba0 	bl	8000504 <__aeabi_ui2d>
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dcc:	f7fe fd3e 	bl	800084c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	a32f      	add	r3, pc, #188	@ (adr r3, 8001e98 <Parking_Process2+0x100>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fc0b 	bl	80005f8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fe17 	bl	8000a1c <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea4 <Parking_Process2+0x10c>)
 8001df2:	6013      	str	r3, [r2, #0]

    if (distance2 <= 5.0) {
 8001df4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea4 <Parking_Process2+0x10c>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d81b      	bhi.n	8001e40 <Parking_Process2+0xa8>

        // COCHE APARCADO

        HAL_GPIO_WritePin(LED_RED_PORT2, LED_RED_PIN2, GPIO_PIN_SET);       // Encender LED rojo
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4824      	ldr	r0, [pc, #144]	@ (8001ea0 <Parking_Process2+0x108>)
 8001e0e:	f001 f8db 	bl	8002fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN_PORT2, LED_GREEN_PIN2, GPIO_PIN_RESET); // Apagar LED verde
 8001e12:	2200      	movs	r2, #0
 8001e14:	2104      	movs	r1, #4
 8001e16:	4822      	ldr	r0, [pc, #136]	@ (8001ea0 <Parking_Process2+0x108>)
 8001e18:	f001 f8d6 	bl	8002fc8 <HAL_GPIO_WritePin>

        if (object_near2 == 0) {
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <Parking_Process2+0x110>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <Parking_Process2+0x9a>
            object_near2 = 1;  // Objeto detectado por primera vez
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <Parking_Process2+0x110>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
            elapsed_time2 = 0; // Reiniciar el tiempo acumulado
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <Parking_Process2+0x114>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e02b      	b.n	8001e8a <Parking_Process2+0xf2>
        } else {
            elapsed_time2 += duration2;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <Parking_Process2+0x114>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001eac <Parking_Process2+0x114>)
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e024      	b.n	8001e8a <Parking_Process2+0xf2>
        }
    } else {

        // SE VA EL COCHE

        HAL_GPIO_WritePin(LED_RED_PORT2, LED_RED_PIN2, GPIO_PIN_RESET); // Apagar LED rojo
 8001e40:	2200      	movs	r2, #0
 8001e42:	2102      	movs	r1, #2
 8001e44:	4816      	ldr	r0, [pc, #88]	@ (8001ea0 <Parking_Process2+0x108>)
 8001e46:	f001 f8bf 	bl	8002fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN_PORT2, LED_GREEN_PIN2, GPIO_PIN_SET);   // Encender LED verde
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <Parking_Process2+0x108>)
 8001e50:	f001 f8ba 	bl	8002fc8 <HAL_GPIO_WritePin>

        if (object_near2 == 1) {
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <Parking_Process2+0x110>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d116      	bne.n	8001e8a <Parking_Process2+0xf2>
            object_near2 = 0;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <Parking_Process2+0x110>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
            tiempo_plaza2 = elapsed_time2; // TIEMPO PLAZA 2
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <Parking_Process2+0x114>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <Parking_Process2+0x118>)
 8001e68:	6013      	str	r3, [r2, #0]
            tiempo_segundos2=tiempo_plaza2/1000.0f;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <Parking_Process2+0x118>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e76:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001eb4 <Parking_Process2+0x11c>
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <Parking_Process2+0x120>)
 8001e80:	edc3 7a00 	vstr	s15, [r3]
            elapsed_time2 = 0;        // REINICIA EL TEMPORIZADOR
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <Parking_Process2+0x114>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
        }
    }

    HAL_Delay(100); // Pausa entre mediciones
 8001e8a:	2064      	movs	r0, #100	@ 0x64
 8001e8c:	f000 fa0c 	bl	80022a8 <HAL_Delay>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	04816f00 	.word	0x04816f00
 8001e9c:	3fa18fc5 	.word	0x3fa18fc5
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	200001b4 	.word	0x200001b4
 8001ea8:	200001c4 	.word	0x200001c4
 8001eac:	200001b8 	.word	0x200001b8
 8001eb0:	200001bc 	.word	0x200001bc
 8001eb4:	447a0000 	.word	0x447a0000
 8001eb8:	200001c0 	.word	0x200001c0

08001ebc <Delay_us2>:

/* Función de delay en microsegundos */
void Delay_us2(uint32_t us) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0); // REINICIAR CTEMPORIZADOR TIM3
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <Delay_us2+0x2c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8001ecc:	bf00      	nop
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <Delay_us2+0x2c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d8f9      	bhi.n	8001ece <Delay_us2+0x12>
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	2000016c 	.word	0x2000016c

08001eec <get_object_near2>:



uint8_t get_object_near2(){return object_near2;}
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <get_object_near2+0x14>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	200001c4 	.word	0x200001c4

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f42:	2007      	movs	r0, #7
 8001f44:	f000 fe62 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <HAL_ADC_MspInit+0x7c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d127      	bne.n	8001fc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <HAL_ADC_MspInit+0x84>)
 8001fc2:	f000 fe65 	bl	8002c90 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	@ 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40012000 	.word	0x40012000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800200a:	e026      	b.n	800205a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_TIM_Base_MspInit+0x90>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
}
 8002032:	e012      	b.n	800205a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <HAL_TIM_Base_MspInit+0x94>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10d      	bne.n	800205a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_TIM_Base_MspInit+0x8c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <NMI_Handler+0x4>

0800207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <UsageFault_Handler+0x4>

0800209c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ca:	f000 f8cd 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 ffaa 	bl	8003030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	@ (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f001 fd74 	bl	8003bfc <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20020000 	.word	0x20020000
 8002140:	00000400 	.word	0x00000400
 8002144:	200001c8 	.word	0x200001c8
 8002148:	20000318 	.word	0x20000318

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <SystemInit+0x20>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <SystemInit+0x20>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002174:	f7ff ffea 	bl	800214c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f001 fd33 	bl	8003c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7ff f913 	bl	80013cc <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80021b4:	08004598 	.word	0x08004598
  ldr r2, =_sbss
 80021b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80021bc:	20000318 	.word	0x20000318

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <HAL_Init+0x40>)
 80021ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <HAL_Init+0x40>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	@ (8002204 <HAL_Init+0x40>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 fd0d 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f808 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7ff fe84 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_InitTick+0x54>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_InitTick+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fd25 	bl	8002c76 <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f000 fced 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	@ (8002264 <HAL_InitTick+0x5c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	@ (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	200001cc 	.word	0x200001cc

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200001cc 	.word	0x200001cc

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e033      	b.n	800236e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fe20 	bl	8001f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	f043 0202 	orr.w	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fa96 	bl	8002874 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
 800235e:	e001      	b.n	8002364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Start+0x1a>
 800238e:	2302      	movs	r3, #2
 8002390:	e097      	b.n	80024c2 <HAL_ADC_Start+0x14a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d018      	beq.n	80023da <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023b8:	4b45      	ldr	r3, [pc, #276]	@ (80024d0 <HAL_ADC_Start+0x158>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a45      	ldr	r2, [pc, #276]	@ (80024d4 <HAL_ADC_Start+0x15c>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9a      	lsrs	r2, r3, #18
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d15f      	bne.n	80024a8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002412:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002426:	d106      	bne.n	8002436 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242c:	f023 0206 	bic.w	r2, r3, #6
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	645a      	str	r2, [r3, #68]	@ 0x44
 8002434:	e002      	b.n	800243c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_ADC_Start+0x160>)
 8002446:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002450:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d129      	bne.n	80024c0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e020      	b.n	80024c0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <HAL_ADC_Start+0x164>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d11b      	bne.n	80024c0 <HAL_ADC_Start+0x148>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d114      	bne.n	80024c0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	e00b      	b.n	80024c0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f043 0210 	orr.w	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000
 80024d4:	431bde83 	.word	0x431bde83
 80024d8:	40012300 	.word	0x40012300
 80024dc:	40012000 	.word	0x40012000

080024e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fc:	d113      	bne.n	8002526 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250c:	d10b      	bne.n	8002526 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e063      	b.n	80025ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002526:	f7ff feb3 	bl	8002290 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800252c:	e021      	b.n	8002572 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d01d      	beq.n	8002572 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_ADC_PollForConversion+0x6c>
 800253c:	f7ff fea8 	bl	8002290 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d212      	bcs.n	8002572 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d00b      	beq.n	8002572 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e03d      	b.n	80025ee <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b02      	cmp	r3, #2
 800257e:	d1d6      	bne.n	800252e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0212 	mvn.w	r2, #18
 8002588:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d123      	bne.n	80025ec <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11f      	bne.n	80025ec <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1c>
 8002628:	2302      	movs	r3, #2
 800262a:	e113      	b.n	8002854 <HAL_ADC_ConfigChannel+0x244>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b09      	cmp	r3, #9
 800263a:	d925      	bls.n	8002688 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68d9      	ldr	r1, [r3, #12]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	3b1e      	subs	r3, #30
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43da      	mvns	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	400a      	ands	r2, r1
 8002660:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	4603      	mov	r3, r0
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4403      	add	r3, r0
 800267a:	3b1e      	subs	r3, #30
 800267c:	409a      	lsls	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e022      	b.n	80026ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	2207      	movs	r2, #7
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	400a      	ands	r2, r1
 80026aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4403      	add	r3, r0
 80026c4:	409a      	lsls	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d824      	bhi.n	8002720 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b05      	subs	r3, #5
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b05      	subs	r3, #5
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34
 800271e:	e04c      	b.n	80027ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d824      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b23      	subs	r3, #35	@ 0x23
 800273a:	221f      	movs	r2, #31
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43da      	mvns	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	400a      	ands	r2, r1
 8002748:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b23      	subs	r3, #35	@ 0x23
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002770:	e023      	b.n	80027ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b41      	subs	r3, #65	@ 0x41
 8002784:	221f      	movs	r2, #31
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b41      	subs	r3, #65	@ 0x41
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ba:	4b29      	ldr	r3, [pc, #164]	@ (8002860 <HAL_ADC_ConfigChannel+0x250>)
 80027bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a28      	ldr	r2, [pc, #160]	@ (8002864 <HAL_ADC_ConfigChannel+0x254>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10f      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d8>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d10b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_ADC_ConfigChannel+0x254>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12b      	bne.n	800284a <HAL_ADC_ConfigChannel+0x23a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_ADC_ConfigChannel+0x258>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x1f4>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b11      	cmp	r3, #17
 8002802:	d122      	bne.n	800284a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_ADC_ConfigChannel+0x258>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_ADC_ConfigChannel+0x25c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a11      	ldr	r2, [pc, #68]	@ (8002870 <HAL_ADC_ConfigChannel+0x260>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0c9a      	lsrs	r2, r3, #18
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800283c:	e002      	b.n	8002844 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3b01      	subs	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f9      	bne.n	800283e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40012300 	.word	0x40012300
 8002864:	40012000 	.word	0x40012000
 8002868:	10000012 	.word	0x10000012
 800286c:	20000000 	.word	0x20000000
 8002870:	431bde83 	.word	0x431bde83

08002874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287c:	4b79      	ldr	r3, [pc, #484]	@ (8002a64 <ADC_Init+0x1f0>)
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	431a      	orrs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <ADC_Init+0x1f4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800291a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800293c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	e00f      	b.n	8002972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002970:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0202 	bic.w	r2, r2, #2
 8002980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e1b      	ldrb	r3, [r3, #24]
 800298c:	005a      	lsls	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	3b01      	subs	r3, #1
 80029cc:	035a      	lsls	r2, r3, #13
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e007      	b.n	80029e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	051a      	lsls	r2, r3, #20
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a2a:	025a      	lsls	r2, r3, #9
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	029a      	lsls	r2, r3, #10
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40012300 	.word	0x40012300
 8002a68:	0f000001 	.word	0x0f000001

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	@ (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	@ (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	@ (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	@ 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff3e 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff8e 	bl	8002b60 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff31 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	@ 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e159      	b.n	8002f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f040 8148 	bne.w	8002f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d130      	bne.n	8002d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0201 	and.w	r2, r3, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d017      	beq.n	8002d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d123      	bne.n	8002dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a2 	beq.w	8002f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b57      	ldr	r3, [pc, #348]	@ (8002f78 <HAL_GPIO_Init+0x2e8>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	4a56      	ldr	r2, [pc, #344]	@ (8002f78 <HAL_GPIO_Init+0x2e8>)
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e26:	4b54      	ldr	r3, [pc, #336]	@ (8002f78 <HAL_GPIO_Init+0x2e8>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e32:	4a52      	ldr	r2, [pc, #328]	@ (8002f7c <HAL_GPIO_Init+0x2ec>)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a49      	ldr	r2, [pc, #292]	@ (8002f80 <HAL_GPIO_Init+0x2f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x202>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a48      	ldr	r2, [pc, #288]	@ (8002f84 <HAL_GPIO_Init+0x2f4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x1fe>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a47      	ldr	r2, [pc, #284]	@ (8002f88 <HAL_GPIO_Init+0x2f8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x1fa>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a46      	ldr	r2, [pc, #280]	@ (8002f8c <HAL_GPIO_Init+0x2fc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x1f6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a45      	ldr	r2, [pc, #276]	@ (8002f90 <HAL_GPIO_Init+0x300>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x1f2>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e008      	b.n	8002e94 <HAL_GPIO_Init+0x204>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e006      	b.n	8002e94 <HAL_GPIO_Init+0x204>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e004      	b.n	8002e94 <HAL_GPIO_Init+0x204>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e002      	b.n	8002e94 <HAL_GPIO_Init+0x204>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_GPIO_Init+0x204>
 8002e92:	2300      	movs	r3, #0
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f002 0203 	and.w	r2, r2, #3
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	4093      	lsls	r3, r2
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea4:	4935      	ldr	r1, [pc, #212]	@ (8002f7c <HAL_GPIO_Init+0x2ec>)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	3302      	adds	r3, #2
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb2:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002edc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f00:	4a24      	ldr	r2, [pc, #144]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f06:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f30:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f54:	4a0f      	ldr	r2, [pc, #60]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	f67f aea2 	bls.w	8002cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40013800 	.word	0x40013800
 8002f80:	40020000 	.word	0x40020000
 8002f84:	40020400 	.word	0x40020400
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	40020c00 	.word	0x40020c00
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40013c00 	.word	0x40013c00

08002f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e001      	b.n	8002fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800300c:	887a      	ldrh	r2, [r7, #2]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	041a      	lsls	r2, r3, #16
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43d9      	mvns	r1, r3
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	400b      	ands	r3, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003046:	4a05      	ldr	r2, [pc, #20]	@ (800305c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f9a4 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40013c00 	.word	0x40013c00

08003060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e267      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d075      	beq.n	800316a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800307e:	4b88      	ldr	r3, [pc, #544]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d00c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308a:	4b85      	ldr	r3, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003092:	2b08      	cmp	r3, #8
 8003094:	d112      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b82      	ldr	r3, [pc, #520]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030a2:	d10b      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	4b7e      	ldr	r3, [pc, #504]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05b      	beq.n	8003168 <HAL_RCC_OscConfig+0x108>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d157      	bne.n	8003168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e242      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x74>
 80030c6:	4b76      	ldr	r3, [pc, #472]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a75      	ldr	r2, [pc, #468]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x98>
 80030de:	4b70      	ldr	r3, [pc, #448]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6f      	ldr	r2, [pc, #444]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b6d      	ldr	r3, [pc, #436]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6c      	ldr	r2, [pc, #432]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030f8:	4b69      	ldr	r3, [pc, #420]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a68      	ldr	r2, [pc, #416]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b66      	ldr	r3, [pc, #408]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a65      	ldr	r2, [pc, #404]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff f8ba 	bl	8002290 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7ff f8b6 	bl	8002290 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e207      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b5b      	ldr	r3, [pc, #364]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xc0>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff f8a6 	bl	8002290 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7ff f8a2 	bl	8002290 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	@ 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1f3      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b51      	ldr	r3, [pc, #324]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0xe8>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003176:	4b4a      	ldr	r3, [pc, #296]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b41      	ldr	r3, [pc, #260]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1c7      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4937      	ldr	r1, [pc, #220]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e03a      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_RCC_OscConfig+0x244>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7ff f85b 	bl	8002290 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7ff f857 	bl	8002290 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1a8      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b28      	ldr	r3, [pc, #160]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4925      	ldr	r1, [pc, #148]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_RCC_OscConfig+0x244>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7ff f83a 	bl	8002290 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7ff f836 	bl	8002290 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e187      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d036      	beq.n	80032b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <HAL_RCC_OscConfig+0x248>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7ff f81a 	bl	8002290 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7ff f816 	bl	8002290 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e167      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x200>
 800327e:	e01b      	b.n	80032b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_OscConfig+0x248>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7ff f803 	bl	8002290 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	e00e      	b.n	80032ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328e:	f7fe ffff 	bl	8002290 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d907      	bls.n	80032ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e150      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ea      	bne.n	800328e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8097 	beq.w	80033f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b81      	ldr	r3, [pc, #516]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b7d      	ldr	r3, [pc, #500]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	4a7c      	ldr	r2, [pc, #496]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e6:	4b7a      	ldr	r3, [pc, #488]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b77      	ldr	r3, [pc, #476]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	4b74      	ldr	r3, [pc, #464]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a73      	ldr	r2, [pc, #460]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7fe ffbf 	bl	8002290 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7fe ffbb 	bl	8002290 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e10c      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	4b6a      	ldr	r3, [pc, #424]	@ (80034d4 <HAL_RCC_OscConfig+0x474>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x2ea>
 800333c:	4b64      	ldr	r3, [pc, #400]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a63      	ldr	r2, [pc, #396]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	@ 0x70
 8003348:	e01c      	b.n	8003384 <HAL_RCC_OscConfig+0x324>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x30c>
 8003352:	4b5f      	ldr	r3, [pc, #380]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a5e      	ldr	r2, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
 800335e:	4b5c      	ldr	r3, [pc, #368]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	@ 0x70
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0x324>
 800336c:	4b58      	ldr	r3, [pc, #352]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003370:	4a57      	ldr	r2, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	@ 0x70
 8003378:	4b55      	ldr	r3, [pc, #340]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a54      	ldr	r2, [pc, #336]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d015      	beq.n	80033b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe ff80 	bl	8002290 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe ff7c 	bl	8002290 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0cb      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	4b49      	ldr	r3, [pc, #292]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ee      	beq.n	8003394 <HAL_RCC_OscConfig+0x334>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe ff6a 	bl	8002290 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe ff66 	bl	8002290 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b5      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ee      	bne.n	80033c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b39      	ldr	r3, [pc, #228]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	4a38      	ldr	r2, [pc, #224]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a1 	beq.w	8003540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fe:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b08      	cmp	r3, #8
 8003408:	d05c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d141      	bne.n	8003496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <HAL_RCC_OscConfig+0x478>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe ff3a 	bl	8002290 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe ff36 	bl	8002290 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e087      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	019b      	lsls	r3, r3, #6
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	3b01      	subs	r3, #1
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	491b      	ldr	r1, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x478>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe ff0f 	bl	8002290 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe ff0b 	bl	8002290 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e05c      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x416>
 8003494:	e054      	b.n	8003540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <HAL_RCC_OscConfig+0x478>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fef8 	bl	8002290 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fef4 	bl	8002290 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e045      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x444>
 80034c2:	e03d      	b.n	8003540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e038      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x4ec>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d028      	beq.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d121      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d11a      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800350c:	4013      	ands	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d107      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0cc      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b68      	ldr	r3, [pc, #416]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d90c      	bls.n	800358c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b65      	ldr	r3, [pc, #404]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d044      	beq.n	8003670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d119      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d003      	beq.n	800360e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b3f      	ldr	r3, [pc, #252]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e067      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b37      	ldr	r3, [pc, #220]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4934      	ldr	r1, [pc, #208]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003640:	f7fe fe26 	bl	8002290 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fe fe22 	bl	8002290 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e04f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d20c      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c2:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fd86 	bl	8002208 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	08004544 	.word	0x08004544
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b094      	sub	sp, #80	@ 0x50
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4b79      	ldr	r3, [pc, #484]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003740:	2b08      	cmp	r3, #8
 8003742:	f200 80e1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 800374e:	e0db      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003754:	e0db      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003756:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x208>)
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375a:	e0d8      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b6f      	ldr	r3, [pc, #444]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003766:	4b6d      	ldr	r3, [pc, #436]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	2200      	movs	r2, #0
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800377c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	@ 0x34
 800378a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4651      	mov	r1, sl
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4651      	mov	r1, sl
 80037d0:	ebb2 0801 	subs.w	r8, r2, r1
 80037d4:	4659      	mov	r1, fp
 80037d6:	eb63 0901 	sbc.w	r9, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb18 0303 	adds.w	r3, r8, r3
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb49 0303 	adc.w	r3, r9, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380e:	4629      	mov	r1, r5
 8003810:	024b      	lsls	r3, r1, #9
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003818:	4621      	mov	r1, r4
 800381a:	024a      	lsls	r2, r1, #9
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800382c:	f7fd f946 	bl	8000abc <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	e058      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b38      	ldr	r3, [pc, #224]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	4611      	mov	r1, r2
 8003846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0159      	lsls	r1, r3, #5
 8003862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003866:	0150      	lsls	r0, r2, #5
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4641      	mov	r1, r8
 800386e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb63 0b01 	sbc.w	fp, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800388c:	ebb2 040a 	subs.w	r4, r2, sl
 8003890:	eb63 050b 	sbc.w	r5, r3, fp
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	f7fd f8ec 	bl	8000abc <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003910:	4618      	mov	r0, r3
 8003912:	3750      	adds	r7, #80	@ 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e041      	b.n	80039d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe fb38 	bl	8001fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 f888 	bl	8003a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d001      	beq.n	80039f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e03c      	b.n	8003a72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <HAL_TIM_Base_Start+0xa0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_TIM_Base_Start+0x5c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d013      	beq.n	8003a3c <HAL_TIM_Base_Start+0x5c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1a      	ldr	r2, [pc, #104]	@ (8003a84 <HAL_TIM_Base_Start+0xa4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_TIM_Base_Start+0x5c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a19      	ldr	r2, [pc, #100]	@ (8003a88 <HAL_TIM_Base_Start+0xa8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_TIM_Base_Start+0x5c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <HAL_TIM_Base_Start+0xac>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_Base_Start+0x5c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a16      	ldr	r2, [pc, #88]	@ (8003a90 <HAL_TIM_Base_Start+0xb0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d010      	beq.n	8003a70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5e:	e007      	b.n	8003a70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40014000 	.word	0x40014000

08003a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8003b90 <TIM_Base_SetConfig+0xfc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x38>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a37      	ldr	r2, [pc, #220]	@ (8003b94 <TIM_Base_SetConfig+0x100>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a36      	ldr	r2, [pc, #216]	@ (8003b98 <TIM_Base_SetConfig+0x104>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a35      	ldr	r2, [pc, #212]	@ (8003b9c <TIM_Base_SetConfig+0x108>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <TIM_Base_SetConfig+0xfc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01b      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aec:	d017      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <TIM_Base_SetConfig+0x100>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <TIM_Base_SetConfig+0x104>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00f      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <TIM_Base_SetConfig+0x108>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <TIM_Base_SetConfig+0x10c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <TIM_Base_SetConfig+0x110>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a23      	ldr	r2, [pc, #140]	@ (8003ba8 <TIM_Base_SetConfig+0x114>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0e      	ldr	r2, [pc, #56]	@ (8003b90 <TIM_Base_SetConfig+0xfc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  }
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800

08003bac <siprintf>:
 8003bac:	b40e      	push	{r1, r2, r3}
 8003bae:	b500      	push	{lr}
 8003bb0:	b09c      	sub	sp, #112	@ 0x70
 8003bb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bb4:	9002      	str	r0, [sp, #8]
 8003bb6:	9006      	str	r0, [sp, #24]
 8003bb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003bbc:	4809      	ldr	r0, [pc, #36]	@ (8003be4 <siprintf+0x38>)
 8003bbe:	9107      	str	r1, [sp, #28]
 8003bc0:	9104      	str	r1, [sp, #16]
 8003bc2:	4909      	ldr	r1, [pc, #36]	@ (8003be8 <siprintf+0x3c>)
 8003bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc8:	9105      	str	r1, [sp, #20]
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	a902      	add	r1, sp, #8
 8003bd0:	f000 f994 	bl	8003efc <_svfiprintf_r>
 8003bd4:	9b02      	ldr	r3, [sp, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	b01c      	add	sp, #112	@ 0x70
 8003bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be0:	b003      	add	sp, #12
 8003be2:	4770      	bx	lr
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	ffff0208 	.word	0xffff0208

08003bec <memset>:
 8003bec:	4402      	add	r2, r0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <__errno>:
 8003bfc:	4b01      	ldr	r3, [pc, #4]	@ (8003c04 <__errno+0x8>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000000c 	.word	0x2000000c

08003c08 <__libc_init_array>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c40 <__libc_init_array+0x38>)
 8003c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c44 <__libc_init_array+0x3c>)
 8003c0e:	1b64      	subs	r4, r4, r5
 8003c10:	10a4      	asrs	r4, r4, #2
 8003c12:	2600      	movs	r6, #0
 8003c14:	42a6      	cmp	r6, r4
 8003c16:	d109      	bne.n	8003c2c <__libc_init_array+0x24>
 8003c18:	4d0b      	ldr	r5, [pc, #44]	@ (8003c48 <__libc_init_array+0x40>)
 8003c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c4c <__libc_init_array+0x44>)
 8003c1c:	f000 fc66 	bl	80044ec <_init>
 8003c20:	1b64      	subs	r4, r4, r5
 8003c22:	10a4      	asrs	r4, r4, #2
 8003c24:	2600      	movs	r6, #0
 8003c26:	42a6      	cmp	r6, r4
 8003c28:	d105      	bne.n	8003c36 <__libc_init_array+0x2e>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c30:	4798      	blx	r3
 8003c32:	3601      	adds	r6, #1
 8003c34:	e7ee      	b.n	8003c14 <__libc_init_array+0xc>
 8003c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3a:	4798      	blx	r3
 8003c3c:	3601      	adds	r6, #1
 8003c3e:	e7f2      	b.n	8003c26 <__libc_init_array+0x1e>
 8003c40:	08004590 	.word	0x08004590
 8003c44:	08004590 	.word	0x08004590
 8003c48:	08004590 	.word	0x08004590
 8003c4c:	08004594 	.word	0x08004594

08003c50 <__retarget_lock_acquire_recursive>:
 8003c50:	4770      	bx	lr

08003c52 <__retarget_lock_release_recursive>:
 8003c52:	4770      	bx	lr

08003c54 <_free_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4605      	mov	r5, r0
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d041      	beq.n	8003ce0 <_free_r+0x8c>
 8003c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c60:	1f0c      	subs	r4, r1, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bfb8      	it	lt
 8003c66:	18e4      	addlt	r4, r4, r3
 8003c68:	f000 f8e0 	bl	8003e2c <__malloc_lock>
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <_free_r+0x90>)
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	b933      	cbnz	r3, 8003c80 <_free_r+0x2c>
 8003c72:	6063      	str	r3, [r4, #4]
 8003c74:	6014      	str	r4, [r2, #0]
 8003c76:	4628      	mov	r0, r5
 8003c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c7c:	f000 b8dc 	b.w	8003e38 <__malloc_unlock>
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	d908      	bls.n	8003c96 <_free_r+0x42>
 8003c84:	6820      	ldr	r0, [r4, #0]
 8003c86:	1821      	adds	r1, r4, r0
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	bf01      	itttt	eq
 8003c8c:	6819      	ldreq	r1, [r3, #0]
 8003c8e:	685b      	ldreq	r3, [r3, #4]
 8003c90:	1809      	addeq	r1, r1, r0
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	e7ed      	b.n	8003c72 <_free_r+0x1e>
 8003c96:	461a      	mov	r2, r3
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	b10b      	cbz	r3, 8003ca0 <_free_r+0x4c>
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	d9fa      	bls.n	8003c96 <_free_r+0x42>
 8003ca0:	6811      	ldr	r1, [r2, #0]
 8003ca2:	1850      	adds	r0, r2, r1
 8003ca4:	42a0      	cmp	r0, r4
 8003ca6:	d10b      	bne.n	8003cc0 <_free_r+0x6c>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	4401      	add	r1, r0
 8003cac:	1850      	adds	r0, r2, r1
 8003cae:	4283      	cmp	r3, r0
 8003cb0:	6011      	str	r1, [r2, #0]
 8003cb2:	d1e0      	bne.n	8003c76 <_free_r+0x22>
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	4408      	add	r0, r1
 8003cbc:	6010      	str	r0, [r2, #0]
 8003cbe:	e7da      	b.n	8003c76 <_free_r+0x22>
 8003cc0:	d902      	bls.n	8003cc8 <_free_r+0x74>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	e7d6      	b.n	8003c76 <_free_r+0x22>
 8003cc8:	6820      	ldr	r0, [r4, #0]
 8003cca:	1821      	adds	r1, r4, r0
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	bf04      	itt	eq
 8003cd0:	6819      	ldreq	r1, [r3, #0]
 8003cd2:	685b      	ldreq	r3, [r3, #4]
 8003cd4:	6063      	str	r3, [r4, #4]
 8003cd6:	bf04      	itt	eq
 8003cd8:	1809      	addeq	r1, r1, r0
 8003cda:	6021      	streq	r1, [r4, #0]
 8003cdc:	6054      	str	r4, [r2, #4]
 8003cde:	e7ca      	b.n	8003c76 <_free_r+0x22>
 8003ce0:	bd38      	pop	{r3, r4, r5, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000314 	.word	0x20000314

08003ce8 <sbrk_aligned>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4e0f      	ldr	r6, [pc, #60]	@ (8003d28 <sbrk_aligned+0x40>)
 8003cec:	460c      	mov	r4, r1
 8003cee:	6831      	ldr	r1, [r6, #0]
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	b911      	cbnz	r1, 8003cfa <sbrk_aligned+0x12>
 8003cf4:	f000 fba6 	bl	8004444 <_sbrk_r>
 8003cf8:	6030      	str	r0, [r6, #0]
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 fba1 	bl	8004444 <_sbrk_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	d103      	bne.n	8003d0e <sbrk_aligned+0x26>
 8003d06:	f04f 34ff 	mov.w	r4, #4294967295
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
 8003d0e:	1cc4      	adds	r4, r0, #3
 8003d10:	f024 0403 	bic.w	r4, r4, #3
 8003d14:	42a0      	cmp	r0, r4
 8003d16:	d0f8      	beq.n	8003d0a <sbrk_aligned+0x22>
 8003d18:	1a21      	subs	r1, r4, r0
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f000 fb92 	bl	8004444 <_sbrk_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d1f2      	bne.n	8003d0a <sbrk_aligned+0x22>
 8003d24:	e7ef      	b.n	8003d06 <sbrk_aligned+0x1e>
 8003d26:	bf00      	nop
 8003d28:	20000310 	.word	0x20000310

08003d2c <_malloc_r>:
 8003d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d30:	1ccd      	adds	r5, r1, #3
 8003d32:	f025 0503 	bic.w	r5, r5, #3
 8003d36:	3508      	adds	r5, #8
 8003d38:	2d0c      	cmp	r5, #12
 8003d3a:	bf38      	it	cc
 8003d3c:	250c      	movcc	r5, #12
 8003d3e:	2d00      	cmp	r5, #0
 8003d40:	4606      	mov	r6, r0
 8003d42:	db01      	blt.n	8003d48 <_malloc_r+0x1c>
 8003d44:	42a9      	cmp	r1, r5
 8003d46:	d904      	bls.n	8003d52 <_malloc_r+0x26>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	6033      	str	r3, [r6, #0]
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e28 <_malloc_r+0xfc>
 8003d56:	f000 f869 	bl	8003e2c <__malloc_lock>
 8003d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5e:	461c      	mov	r4, r3
 8003d60:	bb44      	cbnz	r4, 8003db4 <_malloc_r+0x88>
 8003d62:	4629      	mov	r1, r5
 8003d64:	4630      	mov	r0, r6
 8003d66:	f7ff ffbf 	bl	8003ce8 <sbrk_aligned>
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	d158      	bne.n	8003e22 <_malloc_r+0xf6>
 8003d70:	f8d8 4000 	ldr.w	r4, [r8]
 8003d74:	4627      	mov	r7, r4
 8003d76:	2f00      	cmp	r7, #0
 8003d78:	d143      	bne.n	8003e02 <_malloc_r+0xd6>
 8003d7a:	2c00      	cmp	r4, #0
 8003d7c:	d04b      	beq.n	8003e16 <_malloc_r+0xea>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	4639      	mov	r1, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	eb04 0903 	add.w	r9, r4, r3
 8003d88:	f000 fb5c 	bl	8004444 <_sbrk_r>
 8003d8c:	4581      	cmp	r9, r0
 8003d8e:	d142      	bne.n	8003e16 <_malloc_r+0xea>
 8003d90:	6821      	ldr	r1, [r4, #0]
 8003d92:	1a6d      	subs	r5, r5, r1
 8003d94:	4629      	mov	r1, r5
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7ff ffa6 	bl	8003ce8 <sbrk_aligned>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d03a      	beq.n	8003e16 <_malloc_r+0xea>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	442b      	add	r3, r5
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	f8d8 3000 	ldr.w	r3, [r8]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	bb62      	cbnz	r2, 8003e08 <_malloc_r+0xdc>
 8003dae:	f8c8 7000 	str.w	r7, [r8]
 8003db2:	e00f      	b.n	8003dd4 <_malloc_r+0xa8>
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	1b52      	subs	r2, r2, r5
 8003db8:	d420      	bmi.n	8003dfc <_malloc_r+0xd0>
 8003dba:	2a0b      	cmp	r2, #11
 8003dbc:	d917      	bls.n	8003dee <_malloc_r+0xc2>
 8003dbe:	1961      	adds	r1, r4, r5
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	6025      	str	r5, [r4, #0]
 8003dc4:	bf18      	it	ne
 8003dc6:	6059      	strne	r1, [r3, #4]
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	bf08      	it	eq
 8003dcc:	f8c8 1000 	streq.w	r1, [r8]
 8003dd0:	5162      	str	r2, [r4, r5]
 8003dd2:	604b      	str	r3, [r1, #4]
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 f82f 	bl	8003e38 <__malloc_unlock>
 8003dda:	f104 000b 	add.w	r0, r4, #11
 8003dde:	1d23      	adds	r3, r4, #4
 8003de0:	f020 0007 	bic.w	r0, r0, #7
 8003de4:	1ac2      	subs	r2, r0, r3
 8003de6:	bf1c      	itt	ne
 8003de8:	1a1b      	subne	r3, r3, r0
 8003dea:	50a3      	strne	r3, [r4, r2]
 8003dec:	e7af      	b.n	8003d4e <_malloc_r+0x22>
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	bf0c      	ite	eq
 8003df4:	f8c8 2000 	streq.w	r2, [r8]
 8003df8:	605a      	strne	r2, [r3, #4]
 8003dfa:	e7eb      	b.n	8003dd4 <_malloc_r+0xa8>
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	6864      	ldr	r4, [r4, #4]
 8003e00:	e7ae      	b.n	8003d60 <_malloc_r+0x34>
 8003e02:	463c      	mov	r4, r7
 8003e04:	687f      	ldr	r7, [r7, #4]
 8003e06:	e7b6      	b.n	8003d76 <_malloc_r+0x4a>
 8003e08:	461a      	mov	r2, r3
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	d1fb      	bne.n	8003e08 <_malloc_r+0xdc>
 8003e10:	2300      	movs	r3, #0
 8003e12:	6053      	str	r3, [r2, #4]
 8003e14:	e7de      	b.n	8003dd4 <_malloc_r+0xa8>
 8003e16:	230c      	movs	r3, #12
 8003e18:	6033      	str	r3, [r6, #0]
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 f80c 	bl	8003e38 <__malloc_unlock>
 8003e20:	e794      	b.n	8003d4c <_malloc_r+0x20>
 8003e22:	6005      	str	r5, [r0, #0]
 8003e24:	e7d6      	b.n	8003dd4 <_malloc_r+0xa8>
 8003e26:	bf00      	nop
 8003e28:	20000314 	.word	0x20000314

08003e2c <__malloc_lock>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	@ (8003e34 <__malloc_lock+0x8>)
 8003e2e:	f7ff bf0f 	b.w	8003c50 <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	2000030c 	.word	0x2000030c

08003e38 <__malloc_unlock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	@ (8003e40 <__malloc_unlock+0x8>)
 8003e3a:	f7ff bf0a 	b.w	8003c52 <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	2000030c 	.word	0x2000030c

08003e44 <__ssputs_r>:
 8003e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e48:	688e      	ldr	r6, [r1, #8]
 8003e4a:	461f      	mov	r7, r3
 8003e4c:	42be      	cmp	r6, r7
 8003e4e:	680b      	ldr	r3, [r1, #0]
 8003e50:	4682      	mov	sl, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	4690      	mov	r8, r2
 8003e56:	d82d      	bhi.n	8003eb4 <__ssputs_r+0x70>
 8003e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e60:	d026      	beq.n	8003eb0 <__ssputs_r+0x6c>
 8003e62:	6965      	ldr	r5, [r4, #20]
 8003e64:	6909      	ldr	r1, [r1, #16]
 8003e66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e6a:	eba3 0901 	sub.w	r9, r3, r1
 8003e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e72:	1c7b      	adds	r3, r7, #1
 8003e74:	444b      	add	r3, r9
 8003e76:	106d      	asrs	r5, r5, #1
 8003e78:	429d      	cmp	r5, r3
 8003e7a:	bf38      	it	cc
 8003e7c:	461d      	movcc	r5, r3
 8003e7e:	0553      	lsls	r3, r2, #21
 8003e80:	d527      	bpl.n	8003ed2 <__ssputs_r+0x8e>
 8003e82:	4629      	mov	r1, r5
 8003e84:	f7ff ff52 	bl	8003d2c <_malloc_r>
 8003e88:	4606      	mov	r6, r0
 8003e8a:	b360      	cbz	r0, 8003ee6 <__ssputs_r+0xa2>
 8003e8c:	6921      	ldr	r1, [r4, #16]
 8003e8e:	464a      	mov	r2, r9
 8003e90:	f000 fae8 	bl	8004464 <memcpy>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	6126      	str	r6, [r4, #16]
 8003ea2:	6165      	str	r5, [r4, #20]
 8003ea4:	444e      	add	r6, r9
 8003ea6:	eba5 0509 	sub.w	r5, r5, r9
 8003eaa:	6026      	str	r6, [r4, #0]
 8003eac:	60a5      	str	r5, [r4, #8]
 8003eae:	463e      	mov	r6, r7
 8003eb0:	42be      	cmp	r6, r7
 8003eb2:	d900      	bls.n	8003eb6 <__ssputs_r+0x72>
 8003eb4:	463e      	mov	r6, r7
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	4632      	mov	r2, r6
 8003eba:	4641      	mov	r1, r8
 8003ebc:	f000 faa8 	bl	8004410 <memmove>
 8003ec0:	68a3      	ldr	r3, [r4, #8]
 8003ec2:	1b9b      	subs	r3, r3, r6
 8003ec4:	60a3      	str	r3, [r4, #8]
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	4433      	add	r3, r6
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	f000 fad4 	bl	8004480 <_realloc_r>
 8003ed8:	4606      	mov	r6, r0
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d1e0      	bne.n	8003ea0 <__ssputs_r+0x5c>
 8003ede:	6921      	ldr	r1, [r4, #16]
 8003ee0:	4650      	mov	r0, sl
 8003ee2:	f7ff feb7 	bl	8003c54 <_free_r>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	f8ca 3000 	str.w	r3, [sl]
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e7e9      	b.n	8003ece <__ssputs_r+0x8a>
	...

08003efc <_svfiprintf_r>:
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	4698      	mov	r8, r3
 8003f02:	898b      	ldrh	r3, [r1, #12]
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	b09d      	sub	sp, #116	@ 0x74
 8003f08:	4607      	mov	r7, r0
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	d510      	bpl.n	8003f32 <_svfiprintf_r+0x36>
 8003f10:	690b      	ldr	r3, [r1, #16]
 8003f12:	b973      	cbnz	r3, 8003f32 <_svfiprintf_r+0x36>
 8003f14:	2140      	movs	r1, #64	@ 0x40
 8003f16:	f7ff ff09 	bl	8003d2c <_malloc_r>
 8003f1a:	6028      	str	r0, [r5, #0]
 8003f1c:	6128      	str	r0, [r5, #16]
 8003f1e:	b930      	cbnz	r0, 8003f2e <_svfiprintf_r+0x32>
 8003f20:	230c      	movs	r3, #12
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	b01d      	add	sp, #116	@ 0x74
 8003f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2e:	2340      	movs	r3, #64	@ 0x40
 8003f30:	616b      	str	r3, [r5, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f36:	2320      	movs	r3, #32
 8003f38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f40:	2330      	movs	r3, #48	@ 0x30
 8003f42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040e0 <_svfiprintf_r+0x1e4>
 8003f46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f4a:	f04f 0901 	mov.w	r9, #1
 8003f4e:	4623      	mov	r3, r4
 8003f50:	469a      	mov	sl, r3
 8003f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f56:	b10a      	cbz	r2, 8003f5c <_svfiprintf_r+0x60>
 8003f58:	2a25      	cmp	r2, #37	@ 0x25
 8003f5a:	d1f9      	bne.n	8003f50 <_svfiprintf_r+0x54>
 8003f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f60:	d00b      	beq.n	8003f7a <_svfiprintf_r+0x7e>
 8003f62:	465b      	mov	r3, fp
 8003f64:	4622      	mov	r2, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f7ff ff6b 	bl	8003e44 <__ssputs_r>
 8003f6e:	3001      	adds	r0, #1
 8003f70:	f000 80a7 	beq.w	80040c2 <_svfiprintf_r+0x1c6>
 8003f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f76:	445a      	add	r2, fp
 8003f78:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 809f 	beq.w	80040c2 <_svfiprintf_r+0x1c6>
 8003f84:	2300      	movs	r3, #0
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f8e:	f10a 0a01 	add.w	sl, sl, #1
 8003f92:	9304      	str	r3, [sp, #16]
 8003f94:	9307      	str	r3, [sp, #28]
 8003f96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f9c:	4654      	mov	r4, sl
 8003f9e:	2205      	movs	r2, #5
 8003fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa4:	484e      	ldr	r0, [pc, #312]	@ (80040e0 <_svfiprintf_r+0x1e4>)
 8003fa6:	f7fc f91b 	bl	80001e0 <memchr>
 8003faa:	9a04      	ldr	r2, [sp, #16]
 8003fac:	b9d8      	cbnz	r0, 8003fe6 <_svfiprintf_r+0xea>
 8003fae:	06d0      	lsls	r0, r2, #27
 8003fb0:	bf44      	itt	mi
 8003fb2:	2320      	movmi	r3, #32
 8003fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fb8:	0711      	lsls	r1, r2, #28
 8003fba:	bf44      	itt	mi
 8003fbc:	232b      	movmi	r3, #43	@ 0x2b
 8003fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc8:	d015      	beq.n	8003ff6 <_svfiprintf_r+0xfa>
 8003fca:	9a07      	ldr	r2, [sp, #28]
 8003fcc:	4654      	mov	r4, sl
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f04f 0c0a 	mov.w	ip, #10
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fda:	3b30      	subs	r3, #48	@ 0x30
 8003fdc:	2b09      	cmp	r3, #9
 8003fde:	d94b      	bls.n	8004078 <_svfiprintf_r+0x17c>
 8003fe0:	b1b0      	cbz	r0, 8004010 <_svfiprintf_r+0x114>
 8003fe2:	9207      	str	r2, [sp, #28]
 8003fe4:	e014      	b.n	8004010 <_svfiprintf_r+0x114>
 8003fe6:	eba0 0308 	sub.w	r3, r0, r8
 8003fea:	fa09 f303 	lsl.w	r3, r9, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	9304      	str	r3, [sp, #16]
 8003ff2:	46a2      	mov	sl, r4
 8003ff4:	e7d2      	b.n	8003f9c <_svfiprintf_r+0xa0>
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	1d19      	adds	r1, r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	9103      	str	r1, [sp, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfbb      	ittet	lt
 8004002:	425b      	neglt	r3, r3
 8004004:	f042 0202 	orrlt.w	r2, r2, #2
 8004008:	9307      	strge	r3, [sp, #28]
 800400a:	9307      	strlt	r3, [sp, #28]
 800400c:	bfb8      	it	lt
 800400e:	9204      	strlt	r2, [sp, #16]
 8004010:	7823      	ldrb	r3, [r4, #0]
 8004012:	2b2e      	cmp	r3, #46	@ 0x2e
 8004014:	d10a      	bne.n	800402c <_svfiprintf_r+0x130>
 8004016:	7863      	ldrb	r3, [r4, #1]
 8004018:	2b2a      	cmp	r3, #42	@ 0x2a
 800401a:	d132      	bne.n	8004082 <_svfiprintf_r+0x186>
 800401c:	9b03      	ldr	r3, [sp, #12]
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	9203      	str	r2, [sp, #12]
 8004024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004028:	3402      	adds	r4, #2
 800402a:	9305      	str	r3, [sp, #20]
 800402c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040f0 <_svfiprintf_r+0x1f4>
 8004030:	7821      	ldrb	r1, [r4, #0]
 8004032:	2203      	movs	r2, #3
 8004034:	4650      	mov	r0, sl
 8004036:	f7fc f8d3 	bl	80001e0 <memchr>
 800403a:	b138      	cbz	r0, 800404c <_svfiprintf_r+0x150>
 800403c:	9b04      	ldr	r3, [sp, #16]
 800403e:	eba0 000a 	sub.w	r0, r0, sl
 8004042:	2240      	movs	r2, #64	@ 0x40
 8004044:	4082      	lsls	r2, r0
 8004046:	4313      	orrs	r3, r2
 8004048:	3401      	adds	r4, #1
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004050:	4824      	ldr	r0, [pc, #144]	@ (80040e4 <_svfiprintf_r+0x1e8>)
 8004052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004056:	2206      	movs	r2, #6
 8004058:	f7fc f8c2 	bl	80001e0 <memchr>
 800405c:	2800      	cmp	r0, #0
 800405e:	d036      	beq.n	80040ce <_svfiprintf_r+0x1d2>
 8004060:	4b21      	ldr	r3, [pc, #132]	@ (80040e8 <_svfiprintf_r+0x1ec>)
 8004062:	bb1b      	cbnz	r3, 80040ac <_svfiprintf_r+0x1b0>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	3307      	adds	r3, #7
 8004068:	f023 0307 	bic.w	r3, r3, #7
 800406c:	3308      	adds	r3, #8
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004072:	4433      	add	r3, r6
 8004074:	9309      	str	r3, [sp, #36]	@ 0x24
 8004076:	e76a      	b.n	8003f4e <_svfiprintf_r+0x52>
 8004078:	fb0c 3202 	mla	r2, ip, r2, r3
 800407c:	460c      	mov	r4, r1
 800407e:	2001      	movs	r0, #1
 8004080:	e7a8      	b.n	8003fd4 <_svfiprintf_r+0xd8>
 8004082:	2300      	movs	r3, #0
 8004084:	3401      	adds	r4, #1
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	4619      	mov	r1, r3
 800408a:	f04f 0c0a 	mov.w	ip, #10
 800408e:	4620      	mov	r0, r4
 8004090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004094:	3a30      	subs	r2, #48	@ 0x30
 8004096:	2a09      	cmp	r2, #9
 8004098:	d903      	bls.n	80040a2 <_svfiprintf_r+0x1a6>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0c6      	beq.n	800402c <_svfiprintf_r+0x130>
 800409e:	9105      	str	r1, [sp, #20]
 80040a0:	e7c4      	b.n	800402c <_svfiprintf_r+0x130>
 80040a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a6:	4604      	mov	r4, r0
 80040a8:	2301      	movs	r3, #1
 80040aa:	e7f0      	b.n	800408e <_svfiprintf_r+0x192>
 80040ac:	ab03      	add	r3, sp, #12
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	462a      	mov	r2, r5
 80040b2:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <_svfiprintf_r+0x1f0>)
 80040b4:	a904      	add	r1, sp, #16
 80040b6:	4638      	mov	r0, r7
 80040b8:	f3af 8000 	nop.w
 80040bc:	1c42      	adds	r2, r0, #1
 80040be:	4606      	mov	r6, r0
 80040c0:	d1d6      	bne.n	8004070 <_svfiprintf_r+0x174>
 80040c2:	89ab      	ldrh	r3, [r5, #12]
 80040c4:	065b      	lsls	r3, r3, #25
 80040c6:	f53f af2d 	bmi.w	8003f24 <_svfiprintf_r+0x28>
 80040ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040cc:	e72c      	b.n	8003f28 <_svfiprintf_r+0x2c>
 80040ce:	ab03      	add	r3, sp, #12
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	462a      	mov	r2, r5
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <_svfiprintf_r+0x1f0>)
 80040d6:	a904      	add	r1, sp, #16
 80040d8:	4638      	mov	r0, r7
 80040da:	f000 f879 	bl	80041d0 <_printf_i>
 80040de:	e7ed      	b.n	80040bc <_svfiprintf_r+0x1c0>
 80040e0:	08004554 	.word	0x08004554
 80040e4:	0800455e 	.word	0x0800455e
 80040e8:	00000000 	.word	0x00000000
 80040ec:	08003e45 	.word	0x08003e45
 80040f0:	0800455a 	.word	0x0800455a

080040f4 <_printf_common>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	4616      	mov	r6, r2
 80040fa:	4698      	mov	r8, r3
 80040fc:	688a      	ldr	r2, [r1, #8]
 80040fe:	690b      	ldr	r3, [r1, #16]
 8004100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004104:	4293      	cmp	r3, r2
 8004106:	bfb8      	it	lt
 8004108:	4613      	movlt	r3, r2
 800410a:	6033      	str	r3, [r6, #0]
 800410c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004110:	4607      	mov	r7, r0
 8004112:	460c      	mov	r4, r1
 8004114:	b10a      	cbz	r2, 800411a <_printf_common+0x26>
 8004116:	3301      	adds	r3, #1
 8004118:	6033      	str	r3, [r6, #0]
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	0699      	lsls	r1, r3, #26
 800411e:	bf42      	ittt	mi
 8004120:	6833      	ldrmi	r3, [r6, #0]
 8004122:	3302      	addmi	r3, #2
 8004124:	6033      	strmi	r3, [r6, #0]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	f015 0506 	ands.w	r5, r5, #6
 800412c:	d106      	bne.n	800413c <_printf_common+0x48>
 800412e:	f104 0a19 	add.w	sl, r4, #25
 8004132:	68e3      	ldr	r3, [r4, #12]
 8004134:	6832      	ldr	r2, [r6, #0]
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	42ab      	cmp	r3, r5
 800413a:	dc26      	bgt.n	800418a <_printf_common+0x96>
 800413c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	3b00      	subs	r3, #0
 8004144:	bf18      	it	ne
 8004146:	2301      	movne	r3, #1
 8004148:	0692      	lsls	r2, r2, #26
 800414a:	d42b      	bmi.n	80041a4 <_printf_common+0xb0>
 800414c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004150:	4641      	mov	r1, r8
 8004152:	4638      	mov	r0, r7
 8004154:	47c8      	blx	r9
 8004156:	3001      	adds	r0, #1
 8004158:	d01e      	beq.n	8004198 <_printf_common+0xa4>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	6922      	ldr	r2, [r4, #16]
 800415e:	f003 0306 	and.w	r3, r3, #6
 8004162:	2b04      	cmp	r3, #4
 8004164:	bf02      	ittt	eq
 8004166:	68e5      	ldreq	r5, [r4, #12]
 8004168:	6833      	ldreq	r3, [r6, #0]
 800416a:	1aed      	subeq	r5, r5, r3
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	bf0c      	ite	eq
 8004170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004174:	2500      	movne	r5, #0
 8004176:	4293      	cmp	r3, r2
 8004178:	bfc4      	itt	gt
 800417a:	1a9b      	subgt	r3, r3, r2
 800417c:	18ed      	addgt	r5, r5, r3
 800417e:	2600      	movs	r6, #0
 8004180:	341a      	adds	r4, #26
 8004182:	42b5      	cmp	r5, r6
 8004184:	d11a      	bne.n	80041bc <_printf_common+0xc8>
 8004186:	2000      	movs	r0, #0
 8004188:	e008      	b.n	800419c <_printf_common+0xa8>
 800418a:	2301      	movs	r3, #1
 800418c:	4652      	mov	r2, sl
 800418e:	4641      	mov	r1, r8
 8004190:	4638      	mov	r0, r7
 8004192:	47c8      	blx	r9
 8004194:	3001      	adds	r0, #1
 8004196:	d103      	bne.n	80041a0 <_printf_common+0xac>
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a0:	3501      	adds	r5, #1
 80041a2:	e7c6      	b.n	8004132 <_printf_common+0x3e>
 80041a4:	18e1      	adds	r1, r4, r3
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	2030      	movs	r0, #48	@ 0x30
 80041aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041ae:	4422      	add	r2, r4
 80041b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041b8:	3302      	adds	r3, #2
 80041ba:	e7c7      	b.n	800414c <_printf_common+0x58>
 80041bc:	2301      	movs	r3, #1
 80041be:	4622      	mov	r2, r4
 80041c0:	4641      	mov	r1, r8
 80041c2:	4638      	mov	r0, r7
 80041c4:	47c8      	blx	r9
 80041c6:	3001      	adds	r0, #1
 80041c8:	d0e6      	beq.n	8004198 <_printf_common+0xa4>
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7d9      	b.n	8004182 <_printf_common+0x8e>
	...

080041d0 <_printf_i>:
 80041d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	7e0f      	ldrb	r7, [r1, #24]
 80041d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041d8:	2f78      	cmp	r7, #120	@ 0x78
 80041da:	4691      	mov	r9, r2
 80041dc:	4680      	mov	r8, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	469a      	mov	sl, r3
 80041e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041e6:	d807      	bhi.n	80041f8 <_printf_i+0x28>
 80041e8:	2f62      	cmp	r7, #98	@ 0x62
 80041ea:	d80a      	bhi.n	8004202 <_printf_i+0x32>
 80041ec:	2f00      	cmp	r7, #0
 80041ee:	f000 80d2 	beq.w	8004396 <_printf_i+0x1c6>
 80041f2:	2f58      	cmp	r7, #88	@ 0x58
 80041f4:	f000 80b9 	beq.w	800436a <_printf_i+0x19a>
 80041f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004200:	e03a      	b.n	8004278 <_printf_i+0xa8>
 8004202:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004206:	2b15      	cmp	r3, #21
 8004208:	d8f6      	bhi.n	80041f8 <_printf_i+0x28>
 800420a:	a101      	add	r1, pc, #4	@ (adr r1, 8004210 <_printf_i+0x40>)
 800420c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004210:	08004269 	.word	0x08004269
 8004214:	0800427d 	.word	0x0800427d
 8004218:	080041f9 	.word	0x080041f9
 800421c:	080041f9 	.word	0x080041f9
 8004220:	080041f9 	.word	0x080041f9
 8004224:	080041f9 	.word	0x080041f9
 8004228:	0800427d 	.word	0x0800427d
 800422c:	080041f9 	.word	0x080041f9
 8004230:	080041f9 	.word	0x080041f9
 8004234:	080041f9 	.word	0x080041f9
 8004238:	080041f9 	.word	0x080041f9
 800423c:	0800437d 	.word	0x0800437d
 8004240:	080042a7 	.word	0x080042a7
 8004244:	08004337 	.word	0x08004337
 8004248:	080041f9 	.word	0x080041f9
 800424c:	080041f9 	.word	0x080041f9
 8004250:	0800439f 	.word	0x0800439f
 8004254:	080041f9 	.word	0x080041f9
 8004258:	080042a7 	.word	0x080042a7
 800425c:	080041f9 	.word	0x080041f9
 8004260:	080041f9 	.word	0x080041f9
 8004264:	0800433f 	.word	0x0800433f
 8004268:	6833      	ldr	r3, [r6, #0]
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6032      	str	r2, [r6, #0]
 8004270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004274:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004278:	2301      	movs	r3, #1
 800427a:	e09d      	b.n	80043b8 <_printf_i+0x1e8>
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	6820      	ldr	r0, [r4, #0]
 8004280:	1d19      	adds	r1, r3, #4
 8004282:	6031      	str	r1, [r6, #0]
 8004284:	0606      	lsls	r6, r0, #24
 8004286:	d501      	bpl.n	800428c <_printf_i+0xbc>
 8004288:	681d      	ldr	r5, [r3, #0]
 800428a:	e003      	b.n	8004294 <_printf_i+0xc4>
 800428c:	0645      	lsls	r5, r0, #25
 800428e:	d5fb      	bpl.n	8004288 <_printf_i+0xb8>
 8004290:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004294:	2d00      	cmp	r5, #0
 8004296:	da03      	bge.n	80042a0 <_printf_i+0xd0>
 8004298:	232d      	movs	r3, #45	@ 0x2d
 800429a:	426d      	negs	r5, r5
 800429c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042a0:	4859      	ldr	r0, [pc, #356]	@ (8004408 <_printf_i+0x238>)
 80042a2:	230a      	movs	r3, #10
 80042a4:	e011      	b.n	80042ca <_printf_i+0xfa>
 80042a6:	6821      	ldr	r1, [r4, #0]
 80042a8:	6833      	ldr	r3, [r6, #0]
 80042aa:	0608      	lsls	r0, r1, #24
 80042ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80042b0:	d402      	bmi.n	80042b8 <_printf_i+0xe8>
 80042b2:	0649      	lsls	r1, r1, #25
 80042b4:	bf48      	it	mi
 80042b6:	b2ad      	uxthmi	r5, r5
 80042b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042ba:	4853      	ldr	r0, [pc, #332]	@ (8004408 <_printf_i+0x238>)
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	bf14      	ite	ne
 80042c0:	230a      	movne	r3, #10
 80042c2:	2308      	moveq	r3, #8
 80042c4:	2100      	movs	r1, #0
 80042c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ca:	6866      	ldr	r6, [r4, #4]
 80042cc:	60a6      	str	r6, [r4, #8]
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	bfa2      	ittt	ge
 80042d2:	6821      	ldrge	r1, [r4, #0]
 80042d4:	f021 0104 	bicge.w	r1, r1, #4
 80042d8:	6021      	strge	r1, [r4, #0]
 80042da:	b90d      	cbnz	r5, 80042e0 <_printf_i+0x110>
 80042dc:	2e00      	cmp	r6, #0
 80042de:	d04b      	beq.n	8004378 <_printf_i+0x1a8>
 80042e0:	4616      	mov	r6, r2
 80042e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042e6:	fb03 5711 	mls	r7, r3, r1, r5
 80042ea:	5dc7      	ldrb	r7, [r0, r7]
 80042ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042f0:	462f      	mov	r7, r5
 80042f2:	42bb      	cmp	r3, r7
 80042f4:	460d      	mov	r5, r1
 80042f6:	d9f4      	bls.n	80042e2 <_printf_i+0x112>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d10b      	bne.n	8004314 <_printf_i+0x144>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	07df      	lsls	r7, r3, #31
 8004300:	d508      	bpl.n	8004314 <_printf_i+0x144>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	6861      	ldr	r1, [r4, #4]
 8004306:	4299      	cmp	r1, r3
 8004308:	bfde      	ittt	le
 800430a:	2330      	movle	r3, #48	@ 0x30
 800430c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004310:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004314:	1b92      	subs	r2, r2, r6
 8004316:	6122      	str	r2, [r4, #16]
 8004318:	f8cd a000 	str.w	sl, [sp]
 800431c:	464b      	mov	r3, r9
 800431e:	aa03      	add	r2, sp, #12
 8004320:	4621      	mov	r1, r4
 8004322:	4640      	mov	r0, r8
 8004324:	f7ff fee6 	bl	80040f4 <_printf_common>
 8004328:	3001      	adds	r0, #1
 800432a:	d14a      	bne.n	80043c2 <_printf_i+0x1f2>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	b004      	add	sp, #16
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	f043 0320 	orr.w	r3, r3, #32
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	4833      	ldr	r0, [pc, #204]	@ (800440c <_printf_i+0x23c>)
 8004340:	2778      	movs	r7, #120	@ 0x78
 8004342:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	6831      	ldr	r1, [r6, #0]
 800434a:	061f      	lsls	r7, r3, #24
 800434c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004350:	d402      	bmi.n	8004358 <_printf_i+0x188>
 8004352:	065f      	lsls	r7, r3, #25
 8004354:	bf48      	it	mi
 8004356:	b2ad      	uxthmi	r5, r5
 8004358:	6031      	str	r1, [r6, #0]
 800435a:	07d9      	lsls	r1, r3, #31
 800435c:	bf44      	itt	mi
 800435e:	f043 0320 	orrmi.w	r3, r3, #32
 8004362:	6023      	strmi	r3, [r4, #0]
 8004364:	b11d      	cbz	r5, 800436e <_printf_i+0x19e>
 8004366:	2310      	movs	r3, #16
 8004368:	e7ac      	b.n	80042c4 <_printf_i+0xf4>
 800436a:	4827      	ldr	r0, [pc, #156]	@ (8004408 <_printf_i+0x238>)
 800436c:	e7e9      	b.n	8004342 <_printf_i+0x172>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	f023 0320 	bic.w	r3, r3, #32
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	e7f6      	b.n	8004366 <_printf_i+0x196>
 8004378:	4616      	mov	r6, r2
 800437a:	e7bd      	b.n	80042f8 <_printf_i+0x128>
 800437c:	6833      	ldr	r3, [r6, #0]
 800437e:	6825      	ldr	r5, [r4, #0]
 8004380:	6961      	ldr	r1, [r4, #20]
 8004382:	1d18      	adds	r0, r3, #4
 8004384:	6030      	str	r0, [r6, #0]
 8004386:	062e      	lsls	r6, r5, #24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	d501      	bpl.n	8004390 <_printf_i+0x1c0>
 800438c:	6019      	str	r1, [r3, #0]
 800438e:	e002      	b.n	8004396 <_printf_i+0x1c6>
 8004390:	0668      	lsls	r0, r5, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0x1bc>
 8004394:	8019      	strh	r1, [r3, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	4616      	mov	r6, r2
 800439c:	e7bc      	b.n	8004318 <_printf_i+0x148>
 800439e:	6833      	ldr	r3, [r6, #0]
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	6032      	str	r2, [r6, #0]
 80043a4:	681e      	ldr	r6, [r3, #0]
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	2100      	movs	r1, #0
 80043aa:	4630      	mov	r0, r6
 80043ac:	f7fb ff18 	bl	80001e0 <memchr>
 80043b0:	b108      	cbz	r0, 80043b6 <_printf_i+0x1e6>
 80043b2:	1b80      	subs	r0, r0, r6
 80043b4:	6060      	str	r0, [r4, #4]
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	2300      	movs	r3, #0
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c0:	e7aa      	b.n	8004318 <_printf_i+0x148>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	4632      	mov	r2, r6
 80043c6:	4649      	mov	r1, r9
 80043c8:	4640      	mov	r0, r8
 80043ca:	47d0      	blx	sl
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0ad      	beq.n	800432c <_printf_i+0x15c>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	079b      	lsls	r3, r3, #30
 80043d4:	d413      	bmi.n	80043fe <_printf_i+0x22e>
 80043d6:	68e0      	ldr	r0, [r4, #12]
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	4298      	cmp	r0, r3
 80043dc:	bfb8      	it	lt
 80043de:	4618      	movlt	r0, r3
 80043e0:	e7a6      	b.n	8004330 <_printf_i+0x160>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4632      	mov	r2, r6
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d09d      	beq.n	800432c <_printf_i+0x15c>
 80043f0:	3501      	adds	r5, #1
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	9903      	ldr	r1, [sp, #12]
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dcf2      	bgt.n	80043e2 <_printf_i+0x212>
 80043fc:	e7eb      	b.n	80043d6 <_printf_i+0x206>
 80043fe:	2500      	movs	r5, #0
 8004400:	f104 0619 	add.w	r6, r4, #25
 8004404:	e7f5      	b.n	80043f2 <_printf_i+0x222>
 8004406:	bf00      	nop
 8004408:	08004565 	.word	0x08004565
 800440c:	08004576 	.word	0x08004576

08004410 <memmove>:
 8004410:	4288      	cmp	r0, r1
 8004412:	b510      	push	{r4, lr}
 8004414:	eb01 0402 	add.w	r4, r1, r2
 8004418:	d902      	bls.n	8004420 <memmove+0x10>
 800441a:	4284      	cmp	r4, r0
 800441c:	4623      	mov	r3, r4
 800441e:	d807      	bhi.n	8004430 <memmove+0x20>
 8004420:	1e43      	subs	r3, r0, #1
 8004422:	42a1      	cmp	r1, r4
 8004424:	d008      	beq.n	8004438 <memmove+0x28>
 8004426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800442a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800442e:	e7f8      	b.n	8004422 <memmove+0x12>
 8004430:	4402      	add	r2, r0
 8004432:	4601      	mov	r1, r0
 8004434:	428a      	cmp	r2, r1
 8004436:	d100      	bne.n	800443a <memmove+0x2a>
 8004438:	bd10      	pop	{r4, pc}
 800443a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800443e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004442:	e7f7      	b.n	8004434 <memmove+0x24>

08004444 <_sbrk_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4d06      	ldr	r5, [pc, #24]	@ (8004460 <_sbrk_r+0x1c>)
 8004448:	2300      	movs	r3, #0
 800444a:	4604      	mov	r4, r0
 800444c:	4608      	mov	r0, r1
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	f7fd fe46 	bl	80020e0 <_sbrk>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_sbrk_r+0x1a>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_sbrk_r+0x1a>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20000308 	.word	0x20000308

08004464 <memcpy>:
 8004464:	440a      	add	r2, r1
 8004466:	4291      	cmp	r1, r2
 8004468:	f100 33ff 	add.w	r3, r0, #4294967295
 800446c:	d100      	bne.n	8004470 <memcpy+0xc>
 800446e:	4770      	bx	lr
 8004470:	b510      	push	{r4, lr}
 8004472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800447a:	4291      	cmp	r1, r2
 800447c:	d1f9      	bne.n	8004472 <memcpy+0xe>
 800447e:	bd10      	pop	{r4, pc}

08004480 <_realloc_r>:
 8004480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004484:	4680      	mov	r8, r0
 8004486:	4615      	mov	r5, r2
 8004488:	460c      	mov	r4, r1
 800448a:	b921      	cbnz	r1, 8004496 <_realloc_r+0x16>
 800448c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	4611      	mov	r1, r2
 8004492:	f7ff bc4b 	b.w	8003d2c <_malloc_r>
 8004496:	b92a      	cbnz	r2, 80044a4 <_realloc_r+0x24>
 8004498:	f7ff fbdc 	bl	8003c54 <_free_r>
 800449c:	2400      	movs	r4, #0
 800449e:	4620      	mov	r0, r4
 80044a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a4:	f000 f81a 	bl	80044dc <_malloc_usable_size_r>
 80044a8:	4285      	cmp	r5, r0
 80044aa:	4606      	mov	r6, r0
 80044ac:	d802      	bhi.n	80044b4 <_realloc_r+0x34>
 80044ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044b2:	d8f4      	bhi.n	800449e <_realloc_r+0x1e>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4640      	mov	r0, r8
 80044b8:	f7ff fc38 	bl	8003d2c <_malloc_r>
 80044bc:	4607      	mov	r7, r0
 80044be:	2800      	cmp	r0, #0
 80044c0:	d0ec      	beq.n	800449c <_realloc_r+0x1c>
 80044c2:	42b5      	cmp	r5, r6
 80044c4:	462a      	mov	r2, r5
 80044c6:	4621      	mov	r1, r4
 80044c8:	bf28      	it	cs
 80044ca:	4632      	movcs	r2, r6
 80044cc:	f7ff ffca 	bl	8004464 <memcpy>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4640      	mov	r0, r8
 80044d4:	f7ff fbbe 	bl	8003c54 <_free_r>
 80044d8:	463c      	mov	r4, r7
 80044da:	e7e0      	b.n	800449e <_realloc_r+0x1e>

080044dc <_malloc_usable_size_r>:
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f18      	subs	r0, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfbc      	itt	lt
 80044e6:	580b      	ldrlt	r3, [r1, r0]
 80044e8:	18c0      	addlt	r0, r0, r3
 80044ea:	4770      	bx	lr

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
